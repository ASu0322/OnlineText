{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"express\"","webpack:///external \"mysql\"","webpack:///external \"joi\"","webpack:///external \"redis\"","webpack:///external \"fs\"","webpack:///external \"jsonwebtoken\"","webpack:///external \"body-parser\"","webpack:///external \"https\"","webpack:///external \"cors\"","webpack:///external \"morgan\"","webpack:///external \"path\"","webpack:///external \"cookie-parser\"","webpack:///external \"ws\"","webpack:///external \"dotenv\"","webpack:///./src/config/config.js","webpack:///./src/server/routes/login.route.js","webpack:///./src/server/routes/register.route.js","webpack:///./src/server/modules/jwt.module.js","webpack:///./src/server/controllers/mainPage.controller.js","webpack:///./src/server/routes/mainPage.route.js","webpack:///./src/server/routes/verification.route.js","webpack:///./src/server/modules/message.module.js","webpack:///./src/server/modules/chatRoom.module.js","webpack:///./src/server/controllers/chatMessage.controller.js","webpack:///./src/server/modules/invite.module.js","webpack:///./src/server/modules/userData.module.js","webpack:///./src/server/controllers/invite.controller.js","webpack:///./src/server/controllers/userData.controller.js","webpack:///./src/server/modules/login.module.js","webpack:///./src/server/controllers/login.controller.js","webpack:///./src/server/modules/register.module.js","webpack:///./src/server/controllers/register.controller.js","webpack:///./src/server/routes/file.route.js","webpack:///./src/server/routes/index.route.js","webpack:///./src/config/express.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","config","envVarSchema","Joi","keys","NODE_ENV","string","default","allow","PORT","number","MYSQL_PORT","MYSQL_HOST","MYSQL_USER","MYSQL_PASS","MYSQL_NAME","VERSION","unknown","required","error","envVars","validate","process","env","Error","message","version","port","mysqlPort","mysqlHost","mysqlUserName","mysqlPass","mysqlDatabase","MYSQL_DATABASE","router","express","Router","req","res","render","token","Promise","resolve","reject","jwt","verify","err","payload","console","user_account","sign","_id","toString","expiresIn","cookie","maxAge","httpOnly","secure","cookies","jwtModule","then","jwtVerify_result","catch","send","RoomID","body","post","mainPageCtrl","connectionPool","mysql","createPool","connection","host","user","password","database","roomID","fromUserID","getConnection","connectionError","today","Date","date","getFullYear","getMonth","getDate","time","getHours","getMinutes","getSeconds","sqlCommand","query","result","release","roomName","chatRoomModule","getRoomMember_result","data","getRoomID_result","messageModule","saveMessage_result","client","redis","createClient","on","log","LRANGE","length","jsonpackage","x","JSON","parse","getChatPreloadMessage_result","RPUSH","stringify","toUserID","userID","UserID","UserAccount","userDataModule","getUserID_result","inviteModule","getFriendInvite_result","toUserID_result","params","userName","fromUserID_result","deleteFriendInvite_result","postFriendInvite_result","deleteGroupInvite_result","getUserRoom_result","getFriend_result","userAccount","userPassword","UserPassword","loginModule","checkAccount_result","jwtSetCookie_result","registerModule","createAccount_result","loginCtrl","registerCtrl","userDataCtrl","inviteCtrl","delete","chatMessageCtrl","getOldMessage_result","use","login","register","mainPage","verification","file","app","bodyParser","json","urlencoded","extended","cookieParser","cors","morgan","set","upload","index","static","path","join","status","clients","SERVER_CONFIG","fs","readFileSync","cert","server","https","createServer","wss","SocketServer","Server","verifyClient","info","cb","headers","list","split","forEach","parts","shift","trim","decodeURI","ws","push","jsonData","messageName","userDataMoudule","account","id","fromUserAccount","getMember_result","jsonPackage","some","item","indexOf","splice","listen"],"mappings":"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","file":"index.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 14);\n","module.exports = require(\"express\");","module.exports = require(\"mysql\");","module.exports = require(\"joi\");","module.exports = require(\"redis\");","module.exports = require(\"fs\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"body-parser\");","module.exports = require(\"https\");","module.exports = require(\"cors\");","module.exports = require(\"morgan\");","module.exports = require(\"path\");","module.exports = require(\"cookie-parser\");","module.exports = require(\"ws\");","module.exports = require(\"dotenv\");","/* config.js */\r\nimport Joi from 'joi'\r\n\r\n// require and configure dotenv, will load vars in .env in PROCESS.ENV\r\nrequire('dotenv').config()\r\n\r\n// 建立每個變數 joi 驗證規則\r\nconst envVarSchema = Joi.object().keys({\r\n    NODE_ENV: Joi.string().default('development').allow(['development', 'production']), // 字串且預設值為development 並只允許兩種參數\r\n    PORT: Joi.number().default(8080), // 數字且預設值為 8080\r\n    MYSQL_PORT: Joi.number().default(3306), //數字且預設值為3306\r\n    MYSQL_HOST: Joi.string().default('127.0.0.1'), //字串取預設值為127.0.0.1\r\n    MYSQL_USER: Joi.string(), // 字串\r\n    MYSQL_PASS: Joi.string(), // 字串\r\n    MYSQL_NAME: Joi.string(), // 字串\r\n    VERSION: Joi.string() // 字串\r\n}).unknown().required()\r\n\r\n// process.env 撈取 .env 內的變數做 joi 驗證\r\nconst { error, value: envVars } = Joi.validate( process.env, envVarSchema)\r\n\r\nif (error) {\r\n    throw new Error(`Config validation error: ${error.message}`)\r\n}\r\n\r\nconst config = {\r\n    version: envVars.VERSION, // 版本\r\n    env: envVars.NODE_ENV,  // 開發模式\r\n    port: envVars.PORT,// API 阜號\r\n    mysqlPort: envVars.MYSQL_PORT, // 連接阜號(MYSQL_PORT)\r\n    mysqlHost: envVars.MYSQL_HOST, // 主機名稱 (MYSQL_HOST)\r\n    mysqlUserName: envVars.MYSQL_USER, // 用戶名稱 (MYSQL_USER)\r\n    mysqlPass: envVars.MYSQL_PASS, // 資料庫密碼(MYSQL_PASS)\r\n    mysqlDatabase: envVars.MYSQL_DATABASE  // 阜號\r\n}\r\n\r\nexport default config  // 匯出共用","import express from 'express'\r\nconst router = express.Router()\r\n\r\nrouter.get('/', (req, res) => {\r\n    res.render('Login')\r\n})\r\n\r\n\r\nexport default router","import express from 'express'\r\n\r\nconst router = express.Router()\r\n\r\nrouter.get('/', (req, res) => {\r\n    res.render('Register')\r\n})\r\n\r\nexport default router","import jwt from 'jsonwebtoken'\r\n\r\nconst SECRET = 'thisismynewproject'\r\nconst expires = 1000 * 1000\r\n\r\nconst jwtVerify = (token)=>{\r\n    \r\n    return new Promise((resolve, reject)=>{\r\n\r\n        jwt.verify(token, SECRET, (err, payload) =>{\r\n            \r\n            if(err){\r\n                console.error('verify error:', err)\r\n                reject(err)\r\n\r\n            }else{\r\n\r\n                resolve(payload);\r\n\r\n            }\r\n        })\r\n    })\r\n    \r\n}\r\n\r\nconst jwtSetCookie = (user_account, res)=>{\r\n\r\n    return new Promise((resolve, reject)=>{\r\n\r\n        const token = jwt.sign({ _id: user_account.toString() }, SECRET, { expiresIn: '1 day' })\r\n        res.cookie('token', token, { maxAge: expires, httpOnly: true, secure: false })\r\n        resolve(\"CookieSet\");\r\n\r\n    })\r\n\r\n}\r\n\r\nexport default{\r\n    jwtVerify,\r\n    jwtSetCookie\r\n}","import jwtModule from '../modules/jwt.module'\r\n\r\nconst mainPageGet = (req, res) => {\r\n\r\n    const token = req.cookies.token;\r\n    jwtModule.jwtVerify(token).then((jwtVerify_result) => {\r\n\r\n        res.render('RoomInput')\r\n\r\n    }).catch((err) => {\r\n\r\n        res.send(err)\r\n\r\n    })\r\n}\r\n\r\nconst mainPagePost = (req, res) => {\r\n\r\n    const token = req.cookies.token;\r\n\r\n    jwtModule.jwtVerify(token).then((jwtVerify_result) => {\r\n\r\n        const RoomID = req.body.RoomID\r\n        res.render('GroupChat', {\r\n            RoomID: RoomID\r\n        })\r\n\r\n    }).catch((error) => {\r\n\r\n        res.send(error)\r\n\r\n    })\r\n}\r\n\r\nexport default {\r\n    mainPageGet,\r\n    mainPagePost\r\n}","import express from 'express'\r\nimport mainPageCtrl from '../controllers/mainPage.controller'\r\n\r\nconst router = express.Router()\r\n\r\n// router.route('/').post(mainPageCtrl.mainPagePost)\r\n\r\nrouter.post('/', (req, res) => {\r\n\r\n    mainPageCtrl.mainPagePost(req ,res)\r\n\r\n})\r\n\r\nrouter.get('/', (req, res) => {\r\n\r\n    mainPageCtrl.mainPageGet(req, res)\r\n\r\n})\r\n\r\n\r\n\r\nexport default router","import express from 'express'\r\n\r\nconst router = express.Router()\r\n\r\nrouter.get('/', (req, res) => {\r\n    res.render('Verification')\r\n})\r\nexport default router","import mysql from 'mysql'\r\nimport config from '../../config/config'\r\n\r\nconst connectionPool = mysql.createPool({\r\n    connection: 10,\r\n    host: config.mysqlHost,\r\n    user: config.mysqlUserName,\r\n    password: config.mysqlPass,\r\n    database: config.mysqlDatabase\r\n})\r\n\r\nconst saveMessage = (roomID, fromUserID, message) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        connectionPool.getConnection((connectionError, connection) => {\r\n\r\n            if (connectionError) {\r\n\r\n                reject(connectionError)\r\n\r\n            } else {\r\n                var today = new Date();\r\n                var date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\r\n                var time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\r\n                var dateTime = date + ' ' + time;\r\n\r\n                var sqlCommand = \"INSERT INTO Message(RoomID, FromUserID, Time, Message) VALUES('\" +\r\n                    roomID + \"','\" +\r\n                    fromUserID + \"','\" +\r\n                    dateTime + \"','\" +\r\n                    message + \"')\"\r\n\r\n\r\n                connection.query(sqlCommand, function (err, result) {\r\n\r\n\r\n                    if (err) {\r\n\r\n                        console.error('SQL error:', err)\r\n                        reject(err)\r\n\r\n                    } else {\r\n\r\n                        resolve(result);\r\n                    }\r\n                })\r\n                resolve(0);\r\n                connection.release()\r\n\r\n            }\r\n        })\r\n\r\n    })\r\n}\r\n\r\nconst getChatPreloadMessage = (roomName) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        connectionPool.getConnection((connectionError, connection) => {\r\n            if (connectionError) {\r\n                reject(connectionError)\r\n            } else {\r\n                var sqlCommand = \"SELECT account.UserAccount, Message.Message \" +\r\n                    \"FROM chatroom \" +\r\n                    \"INNER JOIN message \" +\r\n                    \"ON chatroom.RoomID = message.RoomID \" +\r\n\r\n                    \"INNER JOIN account \" +\r\n                    \"ON account.UserID = message.FromUserID \" +\r\n\r\n                    \"WHERE chatroom.RoomName = \" +\r\n                    roomName +\r\n\r\n                    \" ORDER BY message.MessageID \" +\r\n                    \"limit 50\";\r\n\r\n                connection.query(sqlCommand, function (err, result) {\r\n\r\n                    if (err) {\r\n\r\n                        console.error('SQL error:', err)\r\n                        reject(err)\r\n\r\n                    } else {\r\n\r\n                        resolve(result);\r\n\r\n                    }\r\n                })\r\n                connection.release()\r\n            }\r\n        })\r\n\r\n    })\r\n\r\n    // return new Promise((resolve, reject) => {\r\n\r\n    //     connectionPool.getConnection((connectionError, connection) => {\r\n    //         if (connectionError) {\r\n    //             reject(connectionError)\r\n    //         } else {\r\n    //             var sqlCommand = \"SELECT TOP\" +\r\n    //                 insertValues.limit +\r\n    //                 \" * From Message Where RoomID = \" +\r\n    //                 insertValues.roomID +\r\n    //                 \"DESC\"\r\n\r\n    //             connection.query(sqlCommand, function (err, result){\r\n\r\n    //                 if (err) {\r\n    //                     console.error('SQL error:', err)\r\n    //                     resultPackage[\"success\"] = \"fail\"\r\n    //                     resolve(resultPackage);\r\n    //                     // reject(error)\r\n    //                 } else {\r\n    //                     resultPackage[\"success\"] = \"success\"\r\n    //                     resultPackage[\"result\"] = result\r\n    //                     resolve(resultPackage);\r\n    //                 }\r\n    //             })\r\n    //             connection.release()\r\n    //         }\r\n    //     })\r\n\r\n    // })\r\n}\r\n\r\nexport default {\r\n    saveMessage,\r\n    getChatPreloadMessage\r\n}","import mysql from 'mysql'\r\nimport config from '../../config/config'\r\n\r\nconst connectionPool = mysql.createPool({\r\n    connection: 10,\r\n    host: config.mysqlHost,\r\n    user: config.mysqlUserName,\r\n    password: config.mysqlPass,\r\n    database: config.mysqlDatabase\r\n})\r\n\r\nconst creatChatRoom = (roomName, ownID) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        connectionPool.getConnection((connectionError, connection) => {\r\n\r\n            if (connectionError) {\r\n\r\n                reject(connectionError)\r\n\r\n            } else {\r\n\r\n                var sqlCommand = \"INSERT INTO ChatRoom(RoomName, Time, MemberNum, OwnID) VALUES('\" +\r\n                    roomName + \"','\" +\r\n                    \"98-09-04\" + \"','\" +\r\n                    1 + \"','\" +\r\n                    ownID + \"')\"\r\n\r\n                connection.query(sqlCommand, function (err, result) {\r\n\r\n                    if (err) {\r\n\r\n                        console.error('SQL error:', err)\r\n                        reject(err)\r\n\r\n                    } else {\r\n\r\n                        resolve(result);\r\n                    }\r\n                    \r\n                })\r\n\r\n                connection.release()\r\n\r\n            }\r\n        })\r\n\r\n    })\r\n}\r\n\r\nconst getRoomID = (roomName) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        connectionPool.getConnection((connectionError, connection) => {\r\n\r\n            if (connectionError) {\r\n\r\n                reject(connectionError)\r\n\r\n            } else {\r\n                var sqlCommand = \"SELECT RoomID FROM ChatRoom WHERE RoomName = '\" +\r\n                    roomName +\r\n                    \"'\"\r\n\r\n                connection.query(sqlCommand, function (err, result) {\r\n\r\n                    if (err) {\r\n                        console.error('SQL error:', err)\r\n                        reject(err)\r\n                    } else {\r\n\r\n                        resolve(result[0]);\r\n                    }\r\n                })\r\n\r\n                connection.release()\r\n\r\n            }\r\n        })\r\n\r\n    })\r\n}\r\n\r\nconst getRoomMember = (roomName) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        connectionPool.getConnection((connectionError, connection) => {\r\n\r\n            if (connectionError) {\r\n\r\n                reject(connectionError)\r\n\r\n            } else {\r\n                var sqlCommand = \"SELECT member.UserID \" +\r\n                    \"FROM chatroom \" +\r\n\r\n                    \"INNER JOIN member \" +\r\n                    \"ON chatroom.RoomID = member.RoomID \" +\r\n\r\n                    \"WHERE chatroom.RoomName = '\" +\r\n                    roomName +\r\n                    \"'\"\r\n\r\n                connection.query(sqlCommand, function (err, result) {\r\n                    var resultPackage ={}\r\n                    if (err) {\r\n\r\n                        console.error('SQL error:', err)\r\n                        reject(err)\r\n\r\n                    } else {\r\n                        \r\n                        resolve(result);\r\n                        \r\n                    }\r\n                })\r\n\r\n                connection.release()\r\n\r\n            }\r\n        })\r\n\r\n    })\r\n}\r\nexport default {\r\n    creatChatRoom,\r\n    getRoomID,\r\n    getRoomMember\r\n}\r\n","import messageModule from '../modules/message.module'\r\nimport chatRoomModule from '../modules/chatRoom.module'\r\nimport redis from 'redis'\r\n\r\nconst getMember = (roomName) => {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        chatRoomModule.getRoomMember(roomName).then((getRoomMember_result) => {\r\n\r\n            resolve(getRoomMember_result)\r\n\r\n        }).catch((err) => {\r\n\r\n            reject(err)\r\n\r\n        })\r\n    })\r\n\r\n}\r\n\r\nvar saveMessage = (data) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        chatRoomModule.getRoomID(data.roomName).then((getRoomID_result) => {\r\n\r\n            data.roomID = getRoomID_result.RoomID\r\n            messageModule.saveMessage(data.roomID, data.fromUserID, data.message).then((saveMessage_result) => {\r\n\r\n                resolve(saveMessage_result)\r\n\r\n\r\n            }).catch((err) => {\r\n\r\n                reject(err)\r\n\r\n            })\r\n\r\n        }).catch((err) => {\r\n\r\n            reject(err)\r\n\r\n        })\r\n    })\r\n}\r\n\r\nconst getOldMessage = (roomName) => {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        const client = redis.createClient();\r\n        client.on('connect', () => {\r\n\r\n            console.log('Redis client connected');\r\n\r\n        });\r\n\r\n        client.LRANGE(roomName + \"_message\", 0, 50, (err, result) => {\r\n\r\n            if (result.length != 0) {\r\n                var jsonpackage = {}\r\n                jsonpackage[\"messageName\"] = \"getOldMessage\"\r\n                for (let x = 0; x < result.length; x++){\r\n                    result[x] = JSON.parse(result[x])\r\n                }\r\n                jsonpackage[\"data\"] = result\r\n                resolve(jsonpackage)\r\n\r\n            } else {\r\n                messageModule.getChatPreloadMessage(roomName).then((getChatPreloadMessage_result) => {\r\n\r\n                    var jsonpackage = {}\r\n                    jsonpackage[\"messageName\"] = \"getOldMessage\"\r\n                    jsonpackage[\"data\"] = getChatPreloadMessage_result\r\n\r\n                    for (var x = 0; x < jsonpackage.data.length; x++) {\r\n                        client.RPUSH(roomName + \"_message\", JSON.stringify(jsonpackage.data[x]));\r\n                    }\r\n                    resolve(jsonpackage)\r\n\r\n                }).catch((err) => {\r\n\r\n                    reject(err)\r\n                })\r\n\r\n            }\r\n            if (err) {\r\n                console.log(err);\r\n                throw err;\r\n            }\r\n\r\n        });\r\n\r\n    })\r\n\r\n}\r\n\r\nexport default {\r\n    getMember,\r\n    saveMessage,\r\n    getOldMessage\r\n}","import mysql from 'mysql'\r\nimport config from '../../config/config'\r\n\r\nconst connectionPool = mysql.createPool({\r\n    connection: 10,\r\n    host: config.mysqlHost,\r\n    user: config.mysqlUserName,\r\n    password: config.mysqlPass,\r\n    database: config.mysqlDatabase\r\n})\r\n\r\nconst getFriendInvite = (toUserID) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        connectionPool.getConnection((connectionError, connection) => {\r\n\r\n            if (connectionError) {\r\n\r\n                reject(connectionError)\r\n\r\n            } else {\r\n\r\n                var sqlCommand = \"SELECT Account.UserAccount \" +\r\n                    \"FROM Account \" +\r\n\r\n                    \"INNER JOIN friendInvite \" +\r\n                    \"ON friendInvite.fromUserID = Account.userID \" +\r\n\r\n                    \"WHERE friendInvite.toUserID =\" +\r\n                    toUserID \r\n\r\n                connection.query(sqlCommand, function (err, result) {\r\n\r\n                    if (err) {\r\n\r\n                        console.error('SQL error:', err)\r\n                        reject(err)\r\n\r\n                    } else {\r\n\r\n                        resolve(result);\r\n                    }\r\n\r\n                })\r\n\r\n                connection.release()\r\n\r\n            }\r\n        })\r\n\r\n    })\r\n\r\n}\r\n\r\nconst deleteFriendInvite = (toUserID, fromUserID)=>{\r\n    \r\n    return new Promise((resolve, reject) => {\r\n\r\n        connectionPool.getConnection((connectionError, connection) => {\r\n\r\n            if (connectionError) {\r\n\r\n                reject(connectionError)\r\n\r\n            } else {\r\n\r\n                var sqlCommand = \"DELETE FROM friendInvite \" + \r\n                \"WHERE toUserID = \" + toUserID + \" AND \";\r\n                \"WHERE fromUserID = \" + fromUserID \r\n\r\n                connection.query(sqlCommand, function (err, result) {\r\n\r\n                    if (err) {\r\n\r\n                        console.error('SQL error:', err)\r\n                        reject(err)\r\n\r\n                    } else {\r\n\r\n                        resolve(result);\r\n                    }\r\n                    \r\n                })\r\n\r\n                connection.release()\r\n\r\n            }\r\n        })\r\n\r\n    })\r\n    \r\n}\r\n\r\nconst postFriendInvite = (toUserID, fromUserID)=>{\r\n    \r\n    return new Promise((resolve, reject) => {\r\n\r\n        connectionPool.getConnection((connectionError, connection) => {\r\n\r\n            if (connectionError) {\r\n\r\n                reject(connectionError)\r\n\r\n            } else {\r\n\r\n                var sqlCommand = \"INSERT INTO friendInvite(toUserID, fromUserID) VALUES('\" +\r\n                    toUserID + \"','\" +\r\n                    fromUserID + \"')\"\r\n\r\n\r\n                connection.query(sqlCommand, function (err, result) {\r\n\r\n                    if (err) {\r\n\r\n                        console.error('SQL error:', err)\r\n                        reject(err)\r\n\r\n                    } else {\r\n\r\n                        resolve(result);\r\n                    }\r\n                    \r\n                })\r\n\r\n                connection.release()\r\n\r\n            }\r\n        })\r\n\r\n    })\r\n    \r\n}\r\n\r\nconst getGroupInvite = (userID) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        connectionPool.getConnection((connectionError, connection) => {\r\n\r\n            if (connectionError) {\r\n\r\n                reject(connectionError)\r\n\r\n            } else {\r\n\r\n                var sqlCommand = \"SELECT ChatRoom.RoomName \" +\r\n                    \"FROM ChatRoom \" +\r\n\r\n                    \"INNER JOIN groupInvite \" +\r\n                    \"ON groupInvite.groupID = ChatRoom.RoomID \" +\r\n\r\n                    \"WHERE groupInvite.userID =\" +\r\n                    userID \r\n\r\n                connection.query(sqlCommand, function (err, result) {\r\n\r\n                    if (err) {\r\n\r\n                        console.error('SQL error:', err)\r\n                        reject(err)\r\n\r\n                    } else {\r\n\r\n                        resolve(result);\r\n                    }\r\n\r\n                })\r\n\r\n                connection.release()\r\n\r\n            }\r\n        })\r\n\r\n    })\r\n\r\n}\r\n\r\nconst deleteGroupInvite = (userID, groupID)=>{\r\n    \r\n    return new Promise((resolve, reject) => {\r\n\r\n        connectionPool.getConnection((connectionError, connection) => {\r\n\r\n            if (connectionError) {\r\n\r\n                reject(connectionError)\r\n\r\n            } else {\r\n\r\n                var sqlCommand = \"DELETE FROM groupInvite \" + \r\n                \"WHERE userID = \" + userID + \" AND \";\r\n                \"WHERE groupID = \" + groupID \r\n\r\n                connection.query(sqlCommand, function (err, result) {\r\n\r\n                    if (err) {\r\n\r\n                        console.error('SQL error:', err)\r\n                        reject(err)\r\n\r\n                    } else {\r\n\r\n                        resolve(result);\r\n                    }\r\n                    \r\n                })\r\n\r\n                connection.release()\r\n\r\n            }\r\n        })\r\n\r\n    })\r\n    \r\n}\r\n\r\nconst postGroupInvite = (userID, groupID)=>{\r\n    \r\n    return new Promise((resolve, reject) => {\r\n\r\n        connectionPool.getConnection((connectionError, connection) => {\r\n\r\n            if (connectionError) {\r\n\r\n                reject(connectionError)\r\n\r\n            } else {\r\n\r\n                var sqlCommand = \"INSERT INTO groupInvite(userID, groupID) VALUES('\" +\r\n                    userID + \"','\" +\r\n                    groupID + \"')\"\r\n\r\n\r\n                connection.query(sqlCommand, function (err, result) {\r\n\r\n                    if (err) {\r\n\r\n                        console.error('SQL error:', err)\r\n                        reject(err)\r\n\r\n                    } else {\r\n\r\n                        resolve(result);\r\n                    }\r\n                    \r\n                })\r\n\r\n                connection.release()\r\n\r\n            }\r\n        })\r\n\r\n    })\r\n    \r\n}\r\n\r\nexport default{\r\n    getFriendInvite,\r\n    deleteFriendInvite,\r\n    postFriendInvite,\r\n    getGroupInvite,\r\n    deleteGroupInvite,\r\n    postGroupInvite\r\n}","import mysql from 'mysql'\r\nimport config from '../../config/config'\r\n\r\nconst connectionPool = mysql.createPool({\r\n    connection: 10,\r\n    host: config.mysqlHost,\r\n    user: config.mysqlUserName,\r\n    password: config.mysqlPass,\r\n    database: config.mysqlDatabase\r\n})\r\n\r\nconst getUserRoom = (userID) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        connectionPool.getConnection((connectionError, connection) => {\r\n\r\n            if (connectionError) {\r\n                reject(connectionError)\r\n\r\n            } else {\r\n\r\n                var sqlCommand = \"SELECT chatroom.RoomID, chatroom.Time, member.UserID, chatroom.RoomName \" +\r\n                    \"FROM member \" +\r\n                    \"INNER JOIN chatroom \" +\r\n                    \"ON chatroom.RoomID = member.RoomID \" +\r\n                    \"WHERE member.UserID = \" +\r\n                    userID\r\n\r\n                connection.query(sqlCommand, function (err, result) {\r\n                    if (err) {\r\n\r\n                        console.error('SQL error:', err)\r\n                        reject(err)\r\n\r\n                    } else {\r\n\r\n                        resolve(result);\r\n\r\n                    }\r\n                })\r\n\r\n                connection.release()\r\n\r\n            }\r\n        })\r\n\r\n    })\r\n}\r\n\r\nconst getUserFriend = (UserID) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        connectionPool.getConnection((connectionError, connection) => {\r\n\r\n            if (connectionError) {\r\n\r\n                reject(connectionError)\r\n\r\n            } else {\r\n\r\n                var sqlCommand = \"SELECT Account.UserAccount \" +\r\n                    \"FROM Account \" +\r\n                    \"INNER JOIN Friend \" +\r\n                    \"ON Friend.UserID2 = Account.UserID \" +\r\n                    \"WHERE Friend.UserID1 = \" +\r\n                    UserID +\r\n\r\n                    \" UNION SELECT Account.UserAccount \" +\r\n                    \"FROM Account \" +\r\n                    \"INNER JOIN Friend \" +\r\n                    \"ON Friend.UserID1 = Account.UserID \" +\r\n                    \"WHERE Friend.UserID2 = \" +\r\n                    UserID \r\n\r\n                    connection.query(sqlCommand, function (err, result) {\r\n\r\n                        if (err) {\r\n\r\n                            console.error('SQL error:', err)\r\n                            reject(err)\r\n\r\n                        } else {\r\n\r\n                            resolve(result);\r\n                        }\r\n                    })\r\n\r\n                connection.release()\r\n\r\n            }\r\n        })\r\n\r\n    })\r\n}\r\n\r\nconst getUserID = (UserAccount) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        connectionPool.getConnection((connectionError, connection) => {\r\n\r\n            if (connectionError) {\r\n\r\n                reject(connectionError)\r\n\r\n            } else {\r\n\r\n                var sqlCommand = \"SELECT UserID FROM Account WHERE UserAccount = '\" + UserAccount + \"'\"\r\n                connection.query(sqlCommand, function (err, result) {\r\n                    var resultPackage = {}\r\n                    if (err) {\r\n\r\n                        console.error('SQL error:', err)\r\n                        reject(err)\r\n\r\n                    } else {\r\n\r\n                        resolve(result[0]);\r\n\r\n                    }\r\n                })\r\n\r\n                connection.release()\r\n\r\n            }\r\n        })\r\n\r\n    })\r\n}\r\n\r\nconst getUserName = (insertValues) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        connectionPool.getConnection((connectionError, connection) => {\r\n\r\n            if (connectionError) {\r\n\r\n                reject(connectionError)\r\n\r\n            } else {\r\n\r\n                var sqlCommand = \"SELECT UserID FROM Account WHERE UserAccount = '\" + insertValues._id + \"'\"\r\n                connection.query(sqlCommand, function (err, result) {\r\n                    if (err) {\r\n\r\n                        console.error('SQL error:', err)\r\n                        reject(err)\r\n\r\n                    } else {\r\n\r\n                        resolve(result[0]);\r\n\r\n                    }\r\n                })\r\n\r\n                connection.release()\r\n\r\n            }\r\n        })\r\n\r\n    })\r\n}\r\n\r\nexport default {\r\n    getUserRoom,\r\n    getUserFriend,\r\n    getUserName,\r\n    getUserID\r\n}\r\n","import jwtModule from '../modules/jwt.module'\r\nimport inviteModule from '../modules/invite.module'\r\nimport userDataModule from '../modules/userData.module'\r\nimport chatRoomModule from '../modules/chatRoom.module'\r\n\r\n\r\nconst getFriendInvite = (req, res) => {\r\n\r\n    const token = req.cookies.token;\r\n\r\n    jwtModule.jwtVerify(token).then((jwtVerify_result) => {\r\n\r\n        userDataModule.getUserID(jwtVerify_result._id).then((getUserID_result) => {\r\n\r\n            inviteModule.getFriendInvite(getUserID_result.UserID).then((getFriendInvite_result) => {\r\n\r\n                var jsonpackage = {}\r\n                jsonpackage[\"messageName\"] = \"friendInvite\"\r\n                jsonpackage[\"data\"] = getFriendInvite_result\r\n                res.send(JSON.stringify(jsonpackage))\r\n\r\n            }).catch((err) => {\r\n\r\n                res.send(err)\r\n\r\n            })\r\n\r\n        }).catch((err) => {\r\n\r\n            res.send(err)\r\n\r\n        })\r\n\r\n    }).catch((err) => {\r\n\r\n        res.send(err)\r\n\r\n    })\r\n\r\n}\r\n\r\nconst deleteFriendInvite = (req, res) => {\r\n\r\n    const token = req.cookies.token;\r\n\r\n    jwtModule.jwtVerify(token).then((jwtVerify_result) => {\r\n\r\n        userDataModule.getUserID(jwtVerify_result._id).then((toUserID_result) => {\r\n\r\n            userDataModule.getUserID(req.params.userName).then((fromUserID_result) => {\r\n\r\n                inviteModule.deleteFriendInvite(toUserID_result.UserID, fromUserID_result.UserID).then((deleteFriendInvite_result) => {\r\n\r\n                }).catch((err) => {\r\n\r\n                    res.send(err)\r\n\r\n                })\r\n\r\n            }).catch((err) => {\r\n\r\n                res.send(err)\r\n\r\n            })\r\n\r\n        }).catch((err) => {\r\n\r\n            res.send(err)\r\n\r\n        })\r\n        \r\n\r\n    }).catch((err) => {\r\n\r\n        res.send(err)\r\n\r\n    })\r\n\r\n}\r\n\r\nconst postFriendInvite = (req, res) => {\r\n\r\n    const token = req.cookies.token;\r\n\r\n    jwtModule.jwtVerify(token).then((jwtVerify_result) => {\r\n\r\n        userDataModule.getUserID(jwtVerify_result._id).then((fromUserID_result) => {\r\n\r\n            userDataModule.getUserID(req.params.userName).then((toUserID_result) => {\r\n\r\n                inviteModule.postFriendInvite(toUserID_result.UserID, fromUserID_result.UserID).then((postFriendInvite_result) => {\r\n\r\n                }).catch((err) => {\r\n\r\n                    res.send(err)\r\n\r\n                })\r\n\r\n            }).catch((err) => {\r\n\r\n                res.send(err)\r\n\r\n            })\r\n\r\n        }).catch((err) => {\r\n\r\n            res.send(err)\r\n\r\n        })\r\n\r\n        \r\n\r\n    }).catch((err) => {\r\n\r\n        res.send(err)\r\n\r\n    })\r\n\r\n}\r\n\r\nconst getGroupInvite = (req, res) => {\r\n\r\n    const token = req.cookies.token;\r\n\r\n    jwtModule.jwtVerify(token).then((jwtVerify_result) => {\r\n\r\n        userDataModule.getUserID(jwtVerify_result._id).then((getUserID_result) => {\r\n\r\n            inviteModule.getGroupInvite(getUserID_result.UserID).then((deleteGroupInvite_result) => {\r\n\r\n                var jsonpackage = {}\r\n                jsonpackage[\"messageName\"] = \"groupInvite\"\r\n                jsonpackage[\"data\"] = deleteGroupInvite_result\r\n                res.send(JSON.stringify(jsonpackage))\r\n\r\n            }).catch((err) => {\r\n\r\n                res.send(err)\r\n\r\n            })\r\n\r\n        }).catch((err) => {\r\n\r\n            res.send(err)\r\n\r\n        })\r\n\r\n    }).catch((err) => {\r\n\r\n        res.send(err)\r\n\r\n    })\r\n\r\n}\r\n\r\nconst deleteGroupInvite = (req, res) => {\r\n\r\n    const token = req.cookies.token;\r\n\r\n    jwtModule.jwtVerify(token).then((jwtVerify_result) => {\r\n\r\n        userDataModule.getUserID(jwtVerify_result._id).then((getUserID_result) => {\r\n\r\n            chatRoomModule.getRoomID(req.params.roomName).then((getRoomID_result) => {\r\n\r\n                inviteModule.deleteGroupInvite(getUserID_result.UserID, getRoomID_result).then((deleteGroupInvite_result) => {\r\n\r\n                }).catch((err) => {\r\n\r\n                    res.send(err)\r\n\r\n                })\r\n\r\n            }).catch((err) => {\r\n\r\n                res.send(err)\r\n\r\n            })\r\n\r\n        }).catch((err) => {\r\n\r\n            res.send(err)\r\n\r\n        })\r\n\r\n    }).catch((err) => {\r\n\r\n        res.send(err)\r\n\r\n    })\r\n\r\n}\r\n\r\nconst postGroupInvite = (req, res) => {\r\n\r\n    const token = req.cookies.token;\r\n\r\n    jwtModule.jwtVerify(token).then((jwtVerify_result) => {\r\n\r\n        userDataModule.getUserID(jwtVerify_result._id).then((getUserID_result) => {\r\n\r\n            chatRoomModule.getRoomID(req.params.roomName).then((getRoomID_result) => {\r\n\r\n                inviteModule.postGroupInvite(getUserID_result.UserID, getRoomID_result).then((postGroupInvite_result) => {\r\n\r\n                }).catch((err) => {\r\n\r\n                    res.send(err)\r\n\r\n                })\r\n\r\n            }).catch((err) => {\r\n\r\n                res.send(err)\r\n\r\n            })\r\n\r\n        }).catch((err) => {\r\n\r\n            res.send(err)\r\n\r\n        })\r\n        \r\n\r\n    }).catch((err) => {\r\n\r\n        res.send(err)\r\n\r\n    })\r\n\r\n}\r\n\r\nexport default {\r\n    getFriendInvite,\r\n    deleteFriendInvite,\r\n    postFriendInvite,\r\n    getGroupInvite,\r\n    deleteGroupInvite,\r\n    postGroupInvite\r\n}","import userDataModule from '../modules/userData.module'\r\nimport jwtModule from '../modules/jwt.module'\r\n\r\nconst getRoom = (req, res) => {\r\n    const token = req.cookies.token;\r\n    jwtModule.jwtVerify(token).then((jwtVerify_result) => {\r\n\r\n        userDataModule.getUserID(jwtVerify_result._id).then((getUserID_result) => {\r\n\r\n            userDataModule.getUserRoom(getUserID_result.UserID).then((getUserRoom_result) => {\r\n\r\n                    var jsonpackage = {}\r\n                    jsonpackage[\"messageName\"] = \"userRoom\"\r\n                    jsonpackage[\"data\"] = getUserRoom_result\r\n                    res.send(JSON.stringify(jsonpackage))\r\n\r\n            }).catch((err) => {\r\n\r\n                res.send(err)\r\n\r\n            })\r\n\r\n        }).catch((err) => {\r\n\r\n            res.send(err)\r\n\r\n        })\r\n\r\n    }).catch((err) => {\r\n\r\n        res.send(err)\r\n\r\n    })\r\n\r\n}\r\n\r\nconst getFriend = (req, res) => {\r\n    const token = req.cookies.token;\r\n    jwtModule.jwtVerify(token).then((jwtVerify_result) => {\r\n\r\n        userDataModule.getUserID(jwtVerify_result._id).then((getUserID_result) => {\r\n\r\n            userDataModule.getUserFriend(getUserID_result.UserID).then((getFriend_result) => {\r\n\r\n                    var jsonpackage = {}\r\n                    jsonpackage[\"messageName\"] = \"userFriend\"\r\n                    jsonpackage[\"data\"] = getFriend_result\r\n                    res.send(JSON.stringify(jsonpackage))\r\n\r\n            }).catch((err) => {\r\n\r\n                res.send(err)\r\n\r\n            })\r\n\r\n        }).catch((err) => {\r\n\r\n            res.send(err)\r\n\r\n        })\r\n\r\n    }).catch((err) => {\r\n\r\n        res.send(err)\r\n\r\n    })\r\n\r\n}\r\n\r\nconst getID = (req, res) => {\r\n\r\n    const token = req.cookies.token;\r\n\r\n    jwtModule.jwtVerify(token).then((jwtVerify_result) => {\r\n\r\n\r\n        userDataModule.getUserID(jwtVerify_result._id).then((getUserName_result) => {\r\n\r\n            var jsonpackage = {}\r\n            jsonpackage[\"messageName\"] = \"userID\"\r\n            jsonpackage[\"data\"] = getUserName_result\r\n            res.send(JSON.stringify(jsonpackage))\r\n\r\n        }).catch((err) => {\r\n\r\n            res.send(err)\r\n\r\n        })\r\n\r\n    }).catch((err) => {\r\n\r\n        res.send(err)\r\n\r\n    })\r\n\r\n}\r\n\r\nconst getName = (req, res) => {\r\n\r\n    const token = req.cookies.token;\r\n\r\n    jwtModule.jwtVerify(token).then((jwtVerify_result) => {\r\n\r\n\r\n        var jsonpackage = {}\r\n        jsonpackage[\"messageName\"] = \"userAccount\"\r\n        jsonpackage[\"data\"] = jwtVerify_result._id\r\n        res.send(JSON.stringify(jsonpackage))\r\n\r\n    }).catch((err) => {\r\n\r\n        res.send(err)\r\n\r\n    })\r\n\r\n}\r\n\r\nexport default {\r\n    getRoom,\r\n    getFriend,\r\n    getName,\r\n    getID\r\n}","import mysql from 'mysql'\r\nimport config from '../../config/config'\r\n\r\nconst connectionPool = mysql.createPool({\r\n    connection: 10,\r\n    host: config.mysqlHost,\r\n    user: config.mysqlUserName,\r\n    password: config.mysqlPass,\r\n    database: config.mysqlDatabase\r\n})\r\n\r\nconst checkAccount = (userAccount, userPassword) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        connectionPool.getConnection((connectionError, connection) => {\r\n\r\n            if (connectionError) {\r\n\r\n                reject(connectionError)\r\n\r\n            } else {\r\n\r\n                var sqlCommand = \"Select UserPassword From account Where UserAccount = '\" + userAccount + \"'\"\r\n\r\n                connection.query(sqlCommand, function(err, result){\r\n\r\n                    if (err) {\r\n\r\n                        console.error('SQL error:', err)\r\n                        reject(err)\r\n                        \r\n                    } else if (result.length == 0) {\r\n\r\n                        resolve(\"Account not found\")\r\n\r\n                    } else if (result[0].UserPassword === userPassword) {\r\n\r\n                        resolve(\"success\")\r\n\r\n                    } else {\r\n\r\n                        resolve(\"Password incorrect\")\r\n                        \r\n                    }\r\n\r\n                })\r\n                connection.release()\r\n            }\r\n        })\r\n\r\n    })\r\n}\r\n\r\nexport default {\r\n    checkAccount\r\n}","import loginModule from '../modules/login.module'\r\nimport jwtModule from '../modules/jwt.module'\r\n\r\nconst login = (req, res) => {\r\n\r\n    loginModule.checkAccount(req.params.userAccount, req.params.userPassword).then((checkAccount_result) => {\r\n\r\n        if (checkAccount_result === \"success\"){\r\n\r\n            jwtModule.jwtSetCookie(req.params.userAccount, res).then((jwtSetCookie_result) => {\r\n\r\n                if (jwtSetCookie_result === \"CookieSet\") {\r\n\r\n                    var jsonpackage = {}\r\n                    jsonpackage[\"result\"] = \"success\"\r\n                    res.send(JSON.stringify(jsonpackage))\r\n\r\n                }\r\n                \r\n            }).catch((err) => {\r\n\r\n                res.send(err)\r\n\r\n            })\r\n\r\n        }else{\r\n\r\n            var jsonpackage = {}\r\n            jsonpackage[\"result\"] = \"fail\"\r\n            jsonpackage[\"data\"] = checkAccount_result\r\n            res.send(JSON.stringify(jsonpackage))\r\n\r\n        }\r\n        \r\n\r\n    }).catch((err) => {\r\n\r\n        res.send(err)\r\n\r\n    })\r\n\r\n}\r\nexport default {\r\n    login\r\n}","import mysql from 'mysql'\r\nimport config from '../../config/config'\r\n\r\nconst connectionPool = mysql.createPool({\r\n    connection: 10,\r\n    host: config.mysqlHost,\r\n    user: config.mysqlUserName,\r\n    password: config.mysqlPass,\r\n    database: config.mysqlDatabase\r\n})\r\n\r\nconst createAccount = (userAccount, userPassword) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        connectionPool.getConnection((connectionError, connection) => {\r\n\r\n            if (connectionError) {\r\n\r\n                reject(connectionError)\r\n\r\n            } else {\r\n\r\n                var sqlCommand = \"INSERT INTO Account(UserAccount, UserPassword) VALUES('\" +\r\n                    userAccount + \"','\" +\r\n                    userPassword + \"')\"\r\n               \r\n                connection.query(sqlCommand, function(err, result){\r\n\r\n                    if (err) {\r\n\r\n                        console.error('SQL error:', err)\r\n                        reject(err)\r\n\r\n                    } else {\r\n\r\n                        resolve(result);\r\n\r\n                    }\r\n                    \r\n                })\r\n\r\n                connection.release()\r\n\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\nexport default {\r\n    createAccount\r\n}","import registerModule from '../modules/register.module'\r\nimport loginModule from '../modules/login.module'\r\n\r\nconst register = (req, res) => {\r\n\r\n    loginModule.checkAccount(req.params.userAccount, req.params.userPassword).then((checkAccount_result) => {\r\n        console.log(checkAccount_result)\r\n        if (checkAccount_result === \"Account not found\"){\r\n\r\n            registerModule.createAccount(req.params.userAccount, req.params.userPassword).then((createAccount_result) => {\r\n\r\n                var jsonpackage = {}\r\n                jsonpackage[\"result\"] = \"success\"\r\n                res.send(JSON.stringify(jsonpackage))\r\n\r\n            }).catch((err) => {\r\n\r\n                res.send(err)\r\n\r\n            })\r\n\r\n        } else if (checkAccount_result === \"success\" || checkAccount_result === \"Password incorrect\"){\r\n\r\n            var jsonpackage = {}\r\n            jsonpackage[\"result\"] = \"fail\"\r\n            jsonpackage[\"data\"] = \"Account exist\"\r\n            res.send(JSON.stringify(jsonpackage))\r\n\r\n        }\r\n        console.log(\"sssss\")\r\n\r\n\r\n    }).catch((err) => {\r\n\r\n        res.send(err)\r\n\r\n    })\r\n\r\n}\r\n\r\nexport default {\r\n    register\r\n}","import express from 'express'\r\nimport chatMessageCtrl from '../controllers/chatMessage.controller'\r\nimport inviteCtrl from '../controllers/invite.controller'\r\nimport userDataCtrl from '../controllers/userData.controller'\r\nimport loginCtrl from '../controllers/login.controller'\r\nimport registerCtrl from '../controllers/register.controller'\r\n\r\n\r\nconst router = express.Router()\r\n// login & register\r\nrouter.get('/login/:userAccount/:userPassword', function (req, res) {\r\n\r\n    loginCtrl.login(req, res)\r\n\r\n})\r\n\r\nrouter.post('/register/:userAccount/:userPassword', function (req, res) {\r\n\r\n    registerCtrl.register(req, res)\r\n\r\n})\r\n\r\nrouter.get('/userName', function (req, res) {\r\n    userDataCtrl.getName(req, res)\r\n})\r\n\r\n\r\n// group\r\n// router.post('/room/:roomName', function (req, res) {\r\n//     inviteCtrl.addGroup(req, res)\r\n// })\r\nrouter.get('/room', function (req, res) {\r\n    userDataCtrl.getRoom(req, res)\r\n})\r\n\r\n\r\n// friend\r\n// router.post('/friend/:userName', function (req, res) {\r\n//     inviteCtrl.addFriend(req, res)\r\n// })\r\n\r\nrouter.get('/friend', function (req, res) {\r\n    userDataCtrl.getFriend(req, res)\r\n})\r\n\r\n\r\n\r\n// groupInvite\r\nrouter.get('/groupInvite', function (req, res) {\r\n    inviteCtrl.getGroupInvite(req, res)\r\n})\r\nrouter.post('/groupInvite/:userName/:roomName', function (req, res) {\r\n    inviteCtrl.postFriendInvite(req, res)\r\n})\r\n\r\nrouter.delete('/groupInvite/:roomName', function (req, res) {\r\n    inviteCtrl.deleteFriendInvite(req, res)\r\n})\r\n\r\n\r\n// friendInvite\r\nrouter.get('/friendInvite', function (req, res) {\r\n    inviteCtrl.getFriendInvite(req, res)\r\n})\r\n\r\nrouter.post('/friendInvite/:userName', function (req, res) {\r\n    inviteCtrl.postFriendInvite(req, res)\r\n})\r\n\r\nrouter.delete('/friendInvite/:userName', function (req, res) {\r\n    inviteCtrl.deleteFriendInvite(req, res)\r\n})\r\n\r\n\r\n\r\n// oldMessage\r\nrouter.get('/oldMessage/:roomName', function (req, res) {\r\n\r\n    chatMessageCtrl.getOldMessage(req.params.roomName).then((getOldMessage_result) => {\r\n        \r\n        res.send(JSON.stringify(getOldMessage_result))\r\n\r\n    }).catch((err) => {\r\n\r\n        console.log(err)\r\n\r\n    })\r\n\r\n\r\n})\r\nexport default router","import express from 'express'\r\nimport login from './login.route'\r\nimport register from './register.route'\r\nimport mainPage from './mainPage.route'\r\nimport verification from './verification.route'\r\nimport file from './file.route'\r\n\r\nconst router = express.Router()\r\n\r\nrouter.use('/login', login)\r\nrouter.use('/register', register)\r\nrouter.use('/mainPage', mainPage)\r\nrouter.use('/verification', verification)\r\nrouter.use('/file', file)\r\n\r\nexport default router ","/* express.js */\r\nimport express from 'express';\r\nimport config from './config';\r\nimport index from '../server/routes/index.route';\r\nimport bodyParser from 'body-parser';\r\nimport cors from 'cors'\r\nimport morgan from 'morgan'\r\nimport path from 'path'\r\nimport cookieParser from 'cookie-parser'\r\n\r\nconst app = express()\r\napp.use(bodyParser.json())\r\napp.use(bodyParser.urlencoded({ extended: true }))\r\napp.use(cookieParser())\r\napp.use(cors())\r\napp.use(morgan('dev'))\r\n\r\napp.set('views', './views')\r\napp.set(\"view engine\", \"jade\")\r\n\r\n/* GET home page. */\r\napp.upload = function (req, res) {\r\n    console.log(req.body)\r\n};\r\n\r\napp.get('/', (req, res) => {\r\n    res.send(`server started express on  port http://127.0.0.1:${config.port} (${config.env})`)\r\n})\r\napp.use('/OnlineText', index)\r\n\r\napp.use(express.static(path.join('D:/Front-endEngineerLearning/OnlineText/', 'public')));\r\n\r\napp.use(function (req, res) {\r\n    res.status(404).render('404page')\r\n})\r\n\r\nexport default app","import redis from 'redis'\r\nimport fs from 'fs'\r\nimport https from 'https'\r\nimport config from './config/config'\r\nimport app from './config/express'\r\nimport jwtModule from './server/modules/jwt.module'\r\nimport chatMessageCtrl from './server/controllers/chatMessage.controller'\r\nimport userDataMoudule from './server/modules/userData.module'\r\nimport SocketServer from 'ws'\r\n\r\n\r\nvar clients = []\r\nconst SERVER_CONFIG = {\r\n    key: fs.readFileSync('key.pem'),\r\n\r\n\r\n    cert: fs.readFileSync('cert.pem')\r\n};\r\n\r\nconst server = https.createServer(SERVER_CONFIG, app)\r\nconst wss = new SocketServer.Server({\r\n    server: server\r\n    ,\r\n    verifyClient: function (info, cb) {\r\n        var token = info.req.headers.cookie\r\n        var list = {}\r\n\r\n        if (!token) {\r\n            cb(false, 401, 'Unauthorized')\r\n        }\r\n        else {\r\n            token.split(';').forEach(function (cookie) {\r\n                var parts = cookie.split('=');\r\n                list[parts.shift().trim()] = decodeURI(parts.join('='));\r\n            })\r\n            jwtModule.jwtVerify(list.token).then((jwtVerify_result) => {\r\n\r\n                cb(true);\r\n\r\n            }).catch((err) => {\r\n\r\n                console.log(err)\r\n                cb(false, 401, 'Unauthorized')\r\n\r\n            })\r\n\r\n        }\r\n\r\n    }\r\n})\r\n\r\nwss.on('connection', ws => {\r\n\r\n    clients.push(ws);\r\n\r\n    ws.on('message', data => {\r\n\r\n        var jsonData = JSON.parse(data)\r\n        switch (jsonData.messageName) {\r\n\r\n\r\n            case \"userAccount\":\r\n                userDataMoudule.getUserID(jsonData.data).then((getUserID_result) => {\r\n\r\n                    ws.account = jsonData.data\r\n                    ws.id = getUserID_result.UserID\r\n\r\n                }).catch((err) => {\r\n                    res.send(err)\r\n                })\r\n\r\n\r\n                break\r\n\r\n            case \"message\":\r\n                jsonData.data.fromUserID = ws.id\r\n                jsonData.data.fromUserAccount = ws.account\r\n                chatMessageCtrl.saveMessage(jsonData.data).then((saveMessage_result) => {\r\n\r\n                    chatMessageCtrl.getMember(jsonData.data.roomName).then((getMember_result) => {\r\n\r\n\r\n                        const client = redis.createClient(); // this creates a new client\r\n                        client.on('connect', () => {\r\n                            console.log('Redis client connected');\r\n                        });\r\n                        let jsonPackage = {}\r\n                        jsonPackage[\"UserAccount\"] = jsonData.data.fromUserAccount\r\n                        jsonPackage[\"Message\"] = jsonData.data.message\r\n\r\n\r\n                        client.RPUSH(jsonData.data.roomName + \"_message\", JSON.stringify(jsonPackage));\r\n\r\n                        for (var x = 0; x < clients.length; x++) {\r\n\r\n                            if (getMember_result.some(item => item.UserID === clients[x].id)) {\r\n\r\n                                clients[x].send(JSON.stringify(jsonData))\r\n\r\n                            }\r\n                        }\r\n\r\n                    }).catch((err) => {\r\n                        console.log(err)\r\n                    })\r\n\r\n                }).catch((err) => {\r\n                    console.log(err)\r\n                })\r\n                break\r\n\r\n            default:\r\n                break\r\n\r\n        }\r\n\r\n    })\r\n\r\n    ws.on('close', () => {\r\n\r\n        console.log('Close connected')\r\n\r\n        const index = clients.indexOf(ws);\r\n        if (index > -1) {\r\n            clients.splice(index, 1);\r\n        }\r\n\r\n    })\r\n\r\n})\r\n\r\nserver.listen(config.port, () => {\r\n    console.log(`server started on port https://127.0.\r\n    0.1:${config.port} (${config.env})`)\r\n})\r\n\r\nexport default\r\n    { app, wss };"],"sourceRoot":""}