{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"express\"","webpack:///external \"joi\"","webpack:///external \"mysql\"","webpack:///external \"jsonwebtoken\"","webpack:///external \"body-parser\"","webpack:///external \"cors\"","webpack:///external \"morgan\"","webpack:///external \"path\"","webpack:///external \"cookie-parser\"","webpack:///external \"ws\"","webpack:///external \"dotenv\"","webpack:///external \"http\"","webpack:///./src/config/config.js","webpack:///./src/server/modules/login.module.js","webpack:///./src/server/modules/jwt.module.js","webpack:///./src/server/controllers/login.controller.js","webpack:///./src/server/routes/login.route.js","webpack:///./src/server/modules/register.module.js","webpack:///./src/server/controllers/register.controller.js","webpack:///./src/server/routes/register.route.js","webpack:///./src/server/controllers/mainPage.controller.js","webpack:///./src/server/routes/mainPage.route.js","webpack:///./src/server/routes/verification.route.js","webpack:///./src/server/modules/message.module.js","webpack:///./src/server/modules/userData.module.js","webpack:///./src/server/modules/chatRoom.module.js","webpack:///./src/server/controllers/chatMessage.controller.js","webpack:///./src/server/controllers/userData.controller.js","webpack:///./src/server/routes/file.route.js","webpack:///./src/server/routes/index.route.js","webpack:///./src/config/express.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","config","envVarSchema","Joi","keys","NODE_ENV","string","default","allow","PORT","number","MYSQL_PORT","MYSQL_HOST","MYSQL_USER","MYSQL_PASS","MYSQL_NAME","VERSION","unknown","required","error","envVars","validate","process","env","Error","message","version","port","mysqlPort","mysqlHost","mysqlUserName","mysqlPass","mysqlDatabase","MYSQL_DATABASE","connectionPool","mysql","createPool","connection","host","user","password","database","insertValues","Promise","resolve","reject","getConnection","connectionError","sqlCommand","user_account","query","result","resultPackage","console","UserPassword","user_password","release","token","jwt","verify","err","payload","res","sign","_id","toString","expiresIn","cookie","maxAge","httpOnly","secure","req","body","jwtModule","then","accountModule","success","redirect","render","catch","send","router","express","Router","post","loginCtrl","log","registerCtrl","cookies","RoomID","mainPageCtrl","roomID","fromUserID","getUserRoom","UserID","getUserFriend","memberID","getUserName","getUserID","roomName","data","chatRoomModule","messageModule","jsonpackage","userDataModule","JSON","stringify","getName","getFriend","userDataCtrl","chatMessageCtrl","params","use","login","register","mainPage","verification","file","app","bodyParser","json","urlencoded","extended","cookieParser","cors","morgan","set","upload","index","static","path","join","status","clients","server","createServer","wss","SocketServer","Server","verifyClient","info","cb","headers","list","split","forEach","parts","shift","trim","decodeURI","on","ws","push","jsonData","parse","messageName","userDataMoudule","account","id","fromUserAccount","x","length","some","item","indexOf","splice","listen"],"mappings":"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","file":"index.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 12);\n","module.exports = require(\"express\");","module.exports = require(\"joi\");","module.exports = require(\"mysql\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"body-parser\");","module.exports = require(\"cors\");","module.exports = require(\"morgan\");","module.exports = require(\"path\");","module.exports = require(\"cookie-parser\");","module.exports = require(\"ws\");","module.exports = require(\"dotenv\");","module.exports = require(\"http\");","/* config.js */\r\nimport Joi from 'joi'\r\n\r\n// require and configure dotenv, will load vars in .env in PROCESS.ENV\r\nrequire('dotenv').config()\r\n\r\n// 建立每個變數 joi 驗證規則\r\nconst envVarSchema = Joi.object().keys({\r\n    NODE_ENV: Joi.string().default('development').allow(['development', 'production']), // 字串且預設值為development 並只允許兩種參數\r\n    PORT: Joi.number().default(8080), // 數字且預設值為 8080\r\n    MYSQL_PORT: Joi.number().default(3306), //數字且預設值為3306\r\n    MYSQL_HOST: Joi.string().default('127.0.0.1'), //字串取預設值為127.0.0.1\r\n    MYSQL_USER: Joi.string(), // 字串\r\n    MYSQL_PASS: Joi.string(), // 字串\r\n    MYSQL_NAME: Joi.string(), // 字串\r\n    VERSION: Joi.string() // 字串\r\n}).unknown().required()\r\n\r\n// process.env 撈取 .env 內的變數做 joi 驗證\r\nconst { error, value: envVars } = Joi.validate( process.env, envVarSchema)\r\n\r\nif (error) {\r\n    throw new Error(`Config validation error: ${error.message}`)\r\n}\r\n\r\nconst config = {\r\n    version: envVars.VERSION, // 版本\r\n    env: envVars.NODE_ENV,  // 開發模式\r\n    port: envVars.PORT,// API 阜號\r\n    mysqlPort: envVars.MYSQL_PORT, // 連接阜號(MYSQL_PORT)\r\n    mysqlHost: envVars.MYSQL_HOST, // 主機名稱 (MYSQL_HOST)\r\n    mysqlUserName: envVars.MYSQL_USER, // 用戶名稱 (MYSQL_USER)\r\n    mysqlPass: envVars.MYSQL_PASS, // 資料庫密碼(MYSQL_PASS)\r\n    mysqlDatabase: envVars.MYSQL_DATABASE  // 阜號\r\n}\r\n\r\nexport default config  // 匯出共用","import mysql from 'mysql'\r\nimport config from '../../config/config'\r\n\r\nconst connectionPool = mysql.createPool({\r\n    connection: 10,\r\n    host: config.mysqlHost,\r\n    user: config.mysqlUserName,\r\n    password: config.mysqlPass,\r\n    database: config.mysqlDatabase\r\n})\r\n\r\nconst checkAccount = (insertValues) => {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        connectionPool.getConnection((connectionError, connection) => {\r\n            if (connectionError) {\r\n                reject(connectionError)\r\n            } else {\r\n                var sqlCommand = \"Select UserPassword From account Where UserAccount = '\" + insertValues.user_account + \"'\"\r\n\r\n                connection.query(sqlCommand, function(error, result){\r\n                    var resultPackage = {}\r\n                    if (error) {\r\n\r\n                        console.error('SQL error:', error)\r\n                        resultPackage[\"success\"] = \"fail\"\r\n                        // resolve(resultPackage);\r\n                        reject(error)\r\n                        \r\n                    } else if (result[0].UserPassword === insertValues.user_password) {\r\n\r\n                        resultPackage[\"success\"] = \"success\"\r\n                        resultPackage[\"result\"] = result\r\n                        resolve(resultPackage);\r\n\r\n                    } else {\r\n                        console.error('SQL error:', error)\r\n                        resultPackage[\"success\"] = \"fail\"\r\n                        // resolve(resultPackage);\r\n                        reject(error)\r\n                    }\r\n\r\n                })\r\n                connection.release()\r\n            }\r\n        })\r\n\r\n    })\r\n}\r\n\r\nexport default {\r\n    checkAccount\r\n}","import jwt from 'jsonwebtoken'\n\nconst SECRET = 'thisismynewproject'\nconst expires = 1000 * 1000\n\nconst jwtVerify = (token)=>{\n    \n    return new Promise((resolve, reject)=>{\n\n        jwt.verify(token, SECRET, (err, payload) =>{\n            \n            var resultPackage = {}\n\n            if(err){\n                console.error('verify error:', err)\n                resultPackage[\"verify\"] = \"unverify\"\n                resolve(resultPackage);\n                // reject(err)\n\n            }else{\n                resultPackage[\"verify\"] = \"verify\"\n                resultPackage[\"payload\"] = payload\n                resolve(resultPackage);\n            }\n        })\n    })\n    \n}\n\nconst jwtSetCookie = (user_account, res)=>{\n\n    return new Promise((resolve, reject)=>{\n\n        const token = jwt.sign({ _id: user_account.toString() }, SECRET, { expiresIn: '1 day' })\n        res.cookie('token', token, { maxAge: expires, httpOnly: true, secure: false })\n        resolve(\"CookieSet\");\n\n    })\n\n}\n\nexport default{\n    jwtVerify,\n    jwtSetCookie\n}","import accountModule from '../modules/login.module'\r\nimport jwtModule from '../modules/jwt.module'\r\n\r\nconst loginPost = (req, res) => {\r\n    const insertValues = req.body\r\n\r\n    jwtModule.jwtSetCookie(insertValues.user_account, res).then((result) => {\r\n\r\n        if (result === \"CookieSet\") {\r\n\r\n            accountModule.checkAccount(insertValues).then((result) => {\r\n\r\n                if (result.success === \"success\") {\r\n\r\n\r\n                    res.redirect('mainPage');\r\n\r\n                } else if (result.success === \"fail\") {\r\n\r\n                    res.render(\"Login\", {\r\n                        success: false\r\n                    })\r\n\r\n                }\r\n\r\n            }).catch((err) => {\r\n\r\n                res.send(err)\r\n\r\n            })\r\n\r\n        } else {\r\n\r\n            res.render(\"Login\", {\r\n                success: false\r\n            })\r\n\r\n        }\r\n\r\n\r\n\r\n    }).catch((err) => {\r\n\r\n        res.send(err)\r\n\r\n    })\r\n\r\n\r\n\r\n\r\n\r\n}\r\nexport default {\r\n    loginPost\r\n}","import express from 'express'\r\nimport loginCtrl from '../controllers/login.controller'\r\nconst router = express.Router()\r\n\r\n// router.route('/').post(loginCtrl.loginPost)\r\n\r\nrouter.post('/',(req, res)=>{\r\n    loginCtrl.loginPost(req, res)\r\n})\r\n\r\nrouter.get('/', (req, res) => {\r\n    res.render('Login')\r\n})\r\n\r\n\r\nexport default router","import mysql from 'mysql'\r\nimport config from '../../config/config'\r\n\r\nconst connectionPool = mysql.createPool({\r\n    connection: 10,\r\n    host: config.mysqlHost,\r\n    user: config.mysqlUserName,\r\n    password: config.mysqlPass,\r\n    database: config.mysqlDatabase\r\n})\r\n\r\nconst createAccount = (insertValues) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        connectionPool.getConnection((connectionError, connection) => {\r\n\r\n            if (connectionError) {\r\n\r\n                reject(connectionError)\r\n\r\n            } else {\r\n                var sqlCommand = \"INSERT INTO Account(UserAccount, UserPassword) VALUES('\" +\r\n                    insertValues.user_account + \"','\" +\r\n                    insertValues.user_password + \"')\"\r\n               \r\n                connection.query(sqlCommand, function(error, result){\r\n                    var resultPackage = {}\r\n                    if (error) {\r\n                        console.log(sqlCommand)\r\n                        console.error('SQL error:', error)\r\n                        resultPackage[\"success\"] = \"fail\"\r\n                        resolve(resultPackage);\r\n                        // reject(error)\r\n                    } else {\r\n                        resultPackage[\"success\"] = \"success\"\r\n                        resultPackage[\"result\"] = result\r\n                        resolve(resultPackage);\r\n                    }\r\n                })\r\n\r\n                connection.release()\r\n\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\nexport default {\r\n    createAccount\r\n}","import accountModule from '../modules/register.module'\r\n\r\nconst registerPost = (req, res) => {\r\n    const insertValues = req.body\r\n\r\n    accountModule.createAccount(insertValues).then((result) => {\r\n        if (result.success === \"success\") {\r\n\r\n            res.redirect('verification')\r\n\r\n        } else if (result.success === \"fail\") {\r\n\r\n            res.redirect('register')\r\n\r\n        }\r\n\r\n    }).catch((err) => {\r\n\r\n        res.send(err)\r\n\r\n    })\r\n\r\n\r\n}\r\n\r\nexport default {\r\n    registerPost\r\n}","import express from 'express'\r\nimport registerCtrl from '../controllers/register.controller'\r\n\r\nconst router = express.Router()\r\n\r\n\r\n// router.route('/').post(registerCtrl.registerPost)\r\n\r\nrouter.post('/', (req, res) => {\r\n    registerCtrl.registerPost(req, res)\r\n})\r\n\r\nrouter.get('/', (req, res) => {\r\n    res.render('Register')\r\n})\r\n\r\nexport default router","import jwtModule from '../modules/jwt.module'\r\n\r\nconst mainPageGet = (req, res) => {\r\n\r\n    const token = req.cookies.token;\r\n    jwtModule.jwtVerify(token).then((result) => {\r\n\r\n        if (result.verify === \"verify\") {\r\n\r\n            res.render('RoomInput')\r\n\r\n        } else if (result.verify === \"unverify\") {\r\n\r\n            res.redirect('login')\r\n\r\n        } else {\r\n\r\n            res.redirect('login')\r\n\r\n        }\r\n\r\n    }).catch((err) => {\r\n\r\n        res.send(err)\r\n\r\n    })\r\n}\r\n\r\nconst mainPagePost = (req, res) => {\r\n\r\n    const token = req.cookies.token;\r\n\r\n    jwtModule.jwtVerify(token).then((result) => {\r\n\r\n        if (result.verify === \"verify\") {\r\n\r\n            const RoomID = req.body.RoomID\r\n            res.render('GroupChat', {\r\n                RoomID: RoomID\r\n            })\r\n\r\n        } else if (result.verify === \"unverify\") {\r\n\r\n            res.redirect('login')\r\n\r\n        } else {\r\n\r\n            res.redirect('login')\r\n\r\n        }\r\n\r\n    }).catch((error) => {\r\n\r\n        res.send(error)\r\n\r\n    })\r\n}\r\n\r\nexport default {\r\n    mainPageGet,\r\n    mainPagePost\r\n}","import express from 'express'\r\nimport mainPageCtrl from '../controllers/mainPage.controller'\r\n\r\nconst router = express.Router()\r\n\r\n// router.route('/').post(mainPageCtrl.mainPagePost)\r\n\r\nrouter.post('/', (req, res) => {\r\n\r\n    mainPageCtrl.mainPagePost(req ,res)\r\n\r\n})\r\n\r\nrouter.get('/', (req, res) => {\r\n\r\n    mainPageCtrl.mainPageGet(req, res)\r\n\r\n})\r\n\r\n\r\n\r\nexport default router","import express from 'express'\r\n\r\nconst router = express.Router()\r\n\r\nrouter.post('/', (req, res) => {\r\n    res.render('Verification')\r\n})\r\nexport default router","import mysql from 'mysql'\r\nimport config from '../../config/config'\r\n\r\nconst connectionPool = mysql.createPool({\r\n    connection: 10,\r\n    host: config.mysqlHost,\r\n    user: config.mysqlUserName,\r\n    password: config.mysqlPass,\r\n    database: config.mysqlDatabase\r\n})\r\n\r\nconst saveMessage = (insertValues) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        connectionPool.getConnection((connectionError, connection) => {\r\n\r\n            if (connectionError) {\r\n\r\n                reject(connectionError)\r\n\r\n            } else {\r\n\r\n                var sqlCommand = \"INSERT INTO Message(RoomID, FromUserID, Time, Message) VALUES('\" +\r\n                    insertValues.roomID + \"','\" +\r\n                    insertValues.fromUserID + \"','\" +\r\n                    \"98-09-04\" + \"','\" +\r\n                    insertValues.message + \"')\"\r\n\r\n\r\n                connection.query(sqlCommand, function (err, result) {\r\n\r\n                    var resultPackage = {}\r\n\r\n                    if (err) {\r\n                        console.error('SQL error:', err)\r\n                        resultPackage[\"success\"] = \"fail\"\r\n                        resolve(resultPackage);\r\n                        // reject(error)\r\n                    } else {\r\n                        resultPackage[\"success\"] = \"success\"\r\n                        resultPackage[\"result\"] = result\r\n                        resolve(resultPackage);\r\n                    }\r\n                })\r\n\r\n                connection.release()\r\n\r\n            }\r\n        })\r\n\r\n    })\r\n}\r\n\r\nconst getChatPreloadMessage = (insertValues) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        connectionPool.getConnection((connectionError, connection) => {\r\n            if (connectionError) {\r\n                reject(connectionError)\r\n            } else {\r\n                var sqlCommand = \"SELECT account.UserAccount, Message.Message \" +\r\n                    \"FROM chatroom \" +\r\n                    \"INNER JOIN message \" +\r\n                    \"ON chatroom.RoomID = message.RoomID \" +\r\n\r\n                    \"INNER JOIN account \" +\r\n                    \"ON account.UserID = message.FromUserID \" +\r\n\r\n                    \"WHERE chatroom.RoomName = \" +\r\n                    insertValues\r\n\r\n                connection.query(sqlCommand, function (err, result) {\r\n                    \r\n                    var resultPackage = {}\r\n                    if (err) {\r\n                        console.error('SQL error:', err)\r\n                        resultPackage[\"success\"] = \"fail\"\r\n                        resolve(resultPackage);\r\n                        // reject(error)\r\n                    } else {\r\n                        resultPackage[\"success\"] = \"success\"\r\n                        resultPackage[\"result\"] = result\r\n                        resolve(resultPackage);\r\n                    }\r\n                })\r\n                connection.release()\r\n            }\r\n        })\r\n\r\n    })\r\n\r\n    // return new Promise((resolve, reject) => {\r\n\r\n    //     connectionPool.getConnection((connectionError, connection) => {\r\n    //         if (connectionError) {\r\n    //             reject(connectionError)\r\n    //         } else {\r\n    //             var sqlCommand = \"SELECT TOP\" +\r\n    //                 insertValues.limit +\r\n    //                 \" * From Message Where RoomID = \" +\r\n    //                 insertValues.roomID +\r\n    //                 \"DESC\"\r\n\r\n    //             connection.query(sqlCommand, function (err, result){\r\n\r\n    //                 if (err) {\r\n    //                     console.error('SQL error:', err)\r\n    //                     resultPackage[\"success\"] = \"fail\"\r\n    //                     resolve(resultPackage);\r\n    //                     // reject(error)\r\n    //                 } else {\r\n    //                     resultPackage[\"success\"] = \"success\"\r\n    //                     resultPackage[\"result\"] = result\r\n    //                     resolve(resultPackage);\r\n    //                 }\r\n    //             })\r\n    //             connection.release()\r\n    //         }\r\n    //     })\r\n\r\n    // })\r\n}\r\n\r\nexport default {\r\n    saveMessage,\r\n    getChatPreloadMessage\r\n}","import mysql from 'mysql'\nimport config from '../../config/config'\n\nconst connectionPool = mysql.createPool({\n    connection: 10,\n    host: config.mysqlHost,\n    user: config.mysqlUserName,\n    password: config.mysqlPass,\n    database: config.mysqlDatabase\n})\n\nconst getUserRoom = (insertValues) => {\n\n    return new Promise((resolve, reject) => {\n\n        connectionPool.getConnection((connectionError, connection) => {\n\n            if (connectionError) {\n                reject(connectionError)\n\n            } else {\n\n                var sqlCommand = \"SELECT chatroom.RoomID, chatroom.Time, member.UserID, chatroom.RoomName \" +\n                    \"FROM member \" +\n                    \"INNER JOIN chatroom \" +\n                    \"ON chatroom.RoomID = member.RoomID \" +\n                    \"WHERE member.UserID = \" +\n                    insertValues.UserID\n\n                connection.query(sqlCommand, function (error, result) {\n                    var resultPackage = {}\n                    if (error) {\n                        console.error('SQL error:', error)\n                        resultPackage[\"success\"] = \"fail\"\n                        resolve(resultPackage);\n                        // reject(error)\n                    } else {\n                        resultPackage[\"success\"] = \"success\"\n                        resultPackage[\"result\"] = result\n                        resolve(resultPackage);\n                    }\n                })\n\n                connection.release()\n\n            }\n        })\n\n    })\n}\n\nconst getUserFriend = (insertValues) => {\n\n    return new Promise((resolve, reject) => {\n\n        connectionPool.getConnection((connectionError, connection) => {\n\n            if (connectionError) {\n\n                reject(connectionError)\n\n            } else {\n\n                var sqlCommand = \"SELECT UserID1 FROM Friend WHERE UserID2 ='\" +\n                    insertValues.memberID +\n                    \"' \" +\n                    \"UNION SELECT UserID2 FROM Friend WHERE UserID1 ='\" +\n                    insertValues.memberID +\n                    \"'\"\n\n                connection.query(sqlCommand, function (error, result) {\n                    var resultPackage = {}\n                    if (error) {\n                        console.error('SQL error:', error)\n                        resultPackage[\"success\"] = \"fail\"\n                        resolve(resultPackage);\n                        // reject(error)\n                    } else {\n                        resultPackage[\"success\"] = \"success\"\n                        resultPackage[\"result\"] = result\n                        resolve(resultPackage);\n                    }\n                })\n\n                connection.release()\n\n            }\n        })\n\n    })\n}\n\n\nconst getUserID = (insertValues) => {\n\n    return new Promise((resolve, reject) => {\n\n        connectionPool.getConnection((connectionError, connection) => {\n\n            if (connectionError) {\n\n                reject(connectionError)\n\n            } else {\n\n                var sqlCommand = \"SELECT UserID FROM Account WHERE UserAccount = '\" + insertValues + \"'\"\n                connection.query(sqlCommand, function (error, result) {\n                    var resultPackage = {}\n                    if (error) {\n                        console.error('SQL error:', error)\n                        resultPackage[\"success\"] = \"fail\"\n\n                        // resolve(resultPackage);\n                        reject(error)\n                    } else {\n                        resultPackage[\"success\"] = \"success\"\n                        resultPackage[\"result\"] = result[0]\n                        resolve(resultPackage);\n                    }\n                })\n\n                connection.release()\n\n            }\n        })\n\n    })\n}\n\nconst getUserName = (insertValues) => {\n\n    return new Promise((resolve, reject) => {\n\n        connectionPool.getConnection((connectionError, connection) => {\n\n            if (connectionError) {\n\n                reject(connectionError)\n\n            } else {\n\n                var sqlCommand = \"SELECT UserID FROM Account WHERE UserAccount = '\" + insertValues._id + \"'\"\n                connection.query(sqlCommand, function (error, result) {\n                    var resultPackage = {}\n                    if (error) {\n                        console.error('SQL error:', error)\n                        resultPackage[\"success\"] = \"fail\"\n\n                        // resolve(resultPackage);\n                        reject(error)\n                    } else {\n                        resultPackage[\"success\"] = \"success\"\n                        resultPackage[\"result\"] = result[0]\n                        resolve(resultPackage);\n                    }\n                })\n\n                connection.release()\n\n            }\n        })\n\n    })\n}\n\nexport default {\n    getUserRoom,\n    getUserFriend,\n    getUserName,\n    getUserID\n}\n","import mysql from 'mysql'\nimport config from '../../config/config'\n\nconst connectionPool = mysql.createPool({\n    connection: 10,\n    host: config.mysqlHost,\n    user: config.mysqlUserName,\n    password: config.mysqlPass,\n    database: config.mysqlDatabase\n})\n\nconst creatChatRoom = (insertValues) => {\n\n    return new Promise((resolve, reject) => {\n\n        connectionPool.getConnection((connectionError, connection) => {\n\n            if (connectionError) {\n\n                reject(connectionError)\n\n            } else {\n\n                var sqlCommand = \"INSERT INTO ChatRoom(RoomName, Time, MemberNum, OwnID) VALUES('\" +\n                    insertValues.roomName + \"','\" +\n                    \"98-09-04\" + \"','\" +\n                    insertValues.memberNum + \"','\" +\n                    insertValues.ownID + \"')\"\n\n                connection.query(sqlCommand, function (err, result) {\n\n                    var resultPackage = {}\n\n                    if (err) {\n                        console.error('SQL error:', err)\n                        resultPackage[\"success\"] = \"fail\"\n                        resolve(resultPackage);\n                        // reject(error)\n                    } else {\n                        resultPackage[\"success\"] = \"success\"\n                        resultPackage[\"result\"] = result\n                        resolve(resultPackage);\n                    }\n                })\n\n                connection.release()\n\n            }\n        })\n\n    })\n}\n\nconst getRoomID = (insertValues) => {\n\n    return new Promise((resolve, reject) => {\n\n        connectionPool.getConnection((connectionError, connection) => {\n\n            if (connectionError) {\n\n                reject(connectionError)\n\n            } else {\n                var sqlCommand = \"SELECT RoomID FROM ChatRoom WHERE RoomName = '\" +\n                    insertValues.roomName +\n                    \"'\"\n\n                connection.query(sqlCommand, function (error, result) {\n                    var resultPackage ={}\n                    if (error) {\n                        console.error('SQL error:', error)\n                        resultPackage[\"success\"] = \"fail\"\n                        resolve(resultPackage);\n                        // reject(error)\n                    } else {\n                        resultPackage[\"success\"] = \"success\"\n                        resultPackage[\"result\"] = result[0]\n                        resolve(resultPackage);\n                    }\n                })\n\n                connection.release()\n\n            }\n        })\n\n    })\n}\n\nconst getRoomMember = (insertValues) => {\n\n    return new Promise((resolve, reject) => {\n\n        connectionPool.getConnection((connectionError, connection) => {\n\n            if (connectionError) {\n\n                reject(connectionError)\n\n            } else {\n                var sqlCommand = \"SELECT member.UserID \" +\n                    \"FROM chatroom \" +\n\n                    \"INNER JOIN member \" +\n                    \"ON chatroom.RoomID = member.RoomID \" +\n\n                    \"WHERE chatroom.RoomName = '\" +\n                    insertValues +\n                    \"'\"\n\n                connection.query(sqlCommand, function (error, result) {\n                    var resultPackage ={}\n                    if (error) {\n                        console.error('SQL error:', error)\n                        resultPackage[\"success\"] = \"fail\"\n                        resolve(resultPackage);\n                        // reject(error)\n                    } else {\n                        resultPackage[\"success\"] = \"success\"\n                        \n                        resultPackage[\"result\"] = result\n                        resolve(resultPackage);\n                    }\n                })\n\n                connection.release()\n\n            }\n        })\n\n    })\n}\nexport default {\n    creatChatRoom,\n    getRoomID,\n    getRoomMember\n}\n","import messageModule from '../modules/message.module'\r\nimport userDataModule from '../modules/userData.module'\r\nimport chatRoomModule from '../modules/chatRoom.module'\r\n\r\nconst getMember = (data) => {\r\n    return new Promise((resolve, reject) => {\r\n        \r\n        chatRoomModule.getRoomMember(data).then((result) => {\r\n\r\n            if (result.success === \"success\") {\r\n                resolve(result)\r\n\r\n            } else if (result.success === \"fail\") {\r\n\r\n                resolve(result)\r\n\r\n            }\r\n\r\n        }).catch((err) => {\r\n\r\n            resolve(result)\r\n\r\n        })\r\n    })\r\n\r\n}\r\n\r\nvar saveMessage = (data) => {\r\n    return new Promise((resolve, reject) => {\r\n        chatRoomModule.getRoomID(data).then((result) => {\r\n\r\n            if (result.success === \"success\") {\r\n                \r\n                data.roomID = result.result.RoomID\r\n                messageModule.saveMessage(data).then((result) => {\r\n\r\n                    if (result.success === \"success\") {\r\n                        resolve(result)\r\n                        \r\n                    } else if (result.success === \"fail\") {\r\n\r\n                        resolve(result)\r\n\r\n                    }\r\n\r\n                }).catch((err) => {\r\n\r\n                    resolve(result)\r\n\r\n                })\r\n\r\n\r\n            } else if (result.success === \"fail\") {\r\n\r\n                return result\r\n\r\n            }\r\n            \r\n        }).catch((err) => {\r\n\r\n            return result\r\n\r\n        })\r\n    })\r\n}\r\n\r\nconst getOldMessage = (data) => {\r\n    return new Promise((resolve, reject) => {\r\n        messageModule.getChatPreloadMessage(data).then((result) => {\r\n\r\n            if (result.success == \"success\") {\r\n\r\n\r\n                var jsonpackage = {}\r\n                jsonpackage[\"messageName\"] = \"getOldMessage\"\r\n                jsonpackage[\"data\"] = result.result\r\n                resolve(jsonpackage)\r\n\r\n            } else {\r\n\r\n                resolve(result)\r\n            }\r\n\r\n        }).catch((err) => {\r\n\r\n            resolve(result)\r\n        })\r\n    })\r\n\r\n    \r\n}\r\n\r\nexport default {\r\n    getMember,\r\n    saveMessage,\r\n    getOldMessage\r\n}","import userDataModule from '../modules/userData.module'\nimport messageModule from '../modules/message.module'\nimport jwtModule from '../modules/jwt.module'\n\nconst getRoom = (req, res) => {\n    const token = req.cookies.token;\n    jwtModule.jwtVerify(token).then((result) => {\n\n        if (result.verify === \"verify\") {\n\n            userDataModule.getUserID(result.payload._id).then((result) => {\n\n                if (result.success === \"success\") {\n                    userDataModule.getUserRoom(result.result).then((result) => {\n\n                        if (result.success === \"success\") {\n                            var jsonpackage = {}\n                            jsonpackage[\"messageName\"] = \"userRoom\"\n                            jsonpackage[\"data\"] = result.result\n                            res.send(JSON.stringify(jsonpackage))\n                        } else if (result.success === \"fail\") {\n\n                            // res.redirect('OnlineText')\n\n                        }\n\n                    }).catch((err) => {\n\n                        res.send(err)\n\n                    })\n\n                } else if (result.success === \"fail\") {\n\n                    res.redirect('OnlineText')\n\n                }\n\n            }).catch((err) => {\n\n                res.send(err)\n\n            })\n\n\n\n        } else if (result.verify === \"unverify\") {\n\n            res.redirect('login')\n\n        }\n\n    }).catch((err) => {\n\n        res.send(err)\n\n    })\n\n}\nconst getFriend = (req, res) => {\n    const token = req.cookies.token;\n    jwtModule.jwtVerify(token).then((result) => {\n\n        if (result.verify === \"verify\") {\n\n            userDataModule.getName(result.payload).then((result) => {\n\n                if (result.success === \"success\") {\n\n                    userDataModule.getFriend(result.result).then((result) => {\n\n                        if (result.success === \"success\") {\n\n                            var jsonpackage = {}\n                            jsonpackage[\"messageName\"] = \"userFriend\"\n                            jsonpackage[\"data\"] = result.result\n                            res.send(JSON.stringify(jsonpackage))\n\n                        } else if (result.success === \"fail\") {\n\n                            // res.redirect('OnlineText')\n\n                        }\n\n                    }).catch((err) => {\n\n                        res.send(err)\n\n                    })\n\n                    res.send(JSON.stringify())\n\n                } else if (result.success === \"fail\") {\n\n                    // res.redirect('OnlineText')\n\n                }\n\n            }).catch((err) => {\n\n                res.send(err)\n\n            })\n\n\n        } else if (result.verify === \"unverify\") {\n\n            // res.redirect('login')\n\n        }\n\n    }).catch((err) => {\n\n        res.send(err)\n\n    })\n\n}\n\nconst getID = (req, res) => {\n\n    const token = req.cookies.token;\n\n    jwtModule.jwtVerify(token).then((result) => {\n\n        if (result.verify === \"verify\") {\n\n            userDataModule.getUserName(result.payload).then((result) => {\n                if (result.success === \"success\") {\n\n                    var jsonpackage = {}\n                    jsonpackage[\"messageName\"] = \"userAccount\"\n                    jsonpackage[\"data\"] = result.result\n                    res.send(JSON.stringify(jsonpackage))\n\n                } else if (result.success === \"fail\") {\n\n                    // res.redirect('OnlineText')\n\n                }\n\n            }).catch((err) => {\n\n                res.send(err)\n\n            })\n\n        } else if (result.verify === \"unverify\") {\n\n            // res.redirect('login')\n\n        }\n\n    }).catch((err) => {\n\n        res.send(err)\n\n    })\n\n}\n\nconst getName = (req, res) => {\n\n    const token = req.cookies.token;\n\n    jwtModule.jwtVerify(token).then((result) => {\n\n        if (result.verify === \"verify\") {\n\n            var jsonpackage = {}\n            jsonpackage[\"messageName\"] = \"userAccount\"\n            jsonpackage[\"data\"] = result.payload._id\n            res.send(JSON.stringify(jsonpackage))\n        } else if (result.verify === \"unverify\") {\n\n            // res.redirect('login')\n\n        }\n\n    }).catch((err) => {\n\n        res.send(err)\n\n    })\n\n}\n\nexport default {\n    getRoom,\n    getFriend,\n    getName,\n    getID\n}","import express from 'express'\r\nimport chatMessageCtrl from '../controllers/chatMessage.controller'\r\nimport userDataCtrl from '../controllers/userData.controller'\r\n\r\nconst router = express.Router()\r\n\r\n// router.get('/chatMessage/:chatRoomName', function (req, res) {\r\n//     chatMessageCtrl.sendPassMessage(req, res)\r\n// })\r\n\r\n// router.get('/chatMessage/:chatRoomName/:limit', function (req, res) {\r\n//     chatMessageCtrl.sendPassMessage(req, res)\r\n// })\r\n\r\nrouter.get('/room', function (req, res) {\r\n\r\n    userDataCtrl.getRoom(req, res)\r\n})\r\n\r\nrouter.get('/friend', function (req, res) {\r\n    userDataCtrl.getFriend(req, res)\r\n})\r\n\r\nrouter.get('/userName', function (req, res) {\r\n    userDataCtrl.getName(req, res)\r\n})\r\n\r\nrouter.get('/oldMessage/:roomName', function (req, res) {\r\n\r\n    chatMessageCtrl.getOldMessage(req.params.roomName).then((result)=>{\r\n        res.send(JSON.stringify(result))\r\n\r\n    }).catch((err)=>{\r\n        console.log(err)\r\n    })\r\n\r\n})\r\nexport default router","import express from 'express'\r\nimport login from './login.route'\r\nimport register from './register.route'\r\nimport mainPage from './mainPage.route'\r\nimport verification from './verification.route'\r\nimport file from './file.route'\r\n\r\n\r\nconst router = express.Router()\r\n\r\n/* GET localhost:[port]/api page. */\r\n// router.get('/', (req, res) => {\r\n//     res.send(`此路徑是: losdfsfdfcalhost:${config.port}/api`)\r\n// })\r\n\r\nrouter.use('/login', login)\r\nrouter.use('/register', register)\r\nrouter.use('/mainPage', mainPage)\r\nrouter.use('/verification', verification)\r\nrouter.use('/file', file)\r\n\r\nexport default router ","/* express.js */\r\nimport express from 'express';\r\nimport config from './config';\r\nimport index from '../server/routes/index.route';\r\nimport bodyParser from 'body-parser';\r\nimport cors from 'cors'\r\nimport morgan from 'morgan'\r\nimport path from 'path'\r\nimport cookieParser from 'cookie-parser'\r\n\r\nconst app = express()\r\napp.use(bodyParser.json())\r\napp.use(bodyParser.urlencoded({ extended: true }))\r\napp.use(cookieParser())\r\napp.use(cors())\r\napp.use(morgan('dev'))\r\n\r\napp.set('views', './views')\r\napp.set(\"view engine\", \"jade\")\r\n\r\n/* GET home page. */\r\napp.upload = function (req, res) {\r\n    console.log(req.body)\r\n    //{ user: 'qiangzi' }\r\n};\r\napp.get('/', (req, res) => {\r\n    res.send(`server started express on  port http://127.0.0.1:${config.port} (${config.env})`)\r\n})\r\napp.use('/OnlineText', index)\r\n\r\napp.use(express.static(path.join('C:/OnlineText/', 'public')));\r\n\r\n\r\napp.use(function (req, res) {\r\n    res.status(404).render('404page')\r\n})\r\n\r\nexport default app","import config from './config/config'\r\nimport app from './config/express'\r\nimport jwtModule from './server/modules/jwt.module'\r\nimport chatMessageCtrl from './server/controllers/chatMessage.controller'\r\nimport userDataMoudule from './server/modules/userData.module'\r\nimport SocketServer from 'ws'\r\nvar clients = []\r\nconst server = require('http').createServer(app);\r\nconst wss = new SocketServer.Server({\r\n    server: server\r\n    ,\r\n    verifyClient: function (info, cb) {\r\n        var token = info.req.headers.cookie\r\n        var list = {}\r\n\r\n        if (!token) {\r\n            cb(false, 401, 'Unauthorized')\r\n        }\r\n        else {\r\n            token.split(';').forEach(function (cookie) {\r\n                var parts = cookie.split('=');\r\n                list[parts.shift().trim()] = decodeURI(parts.join('='));\r\n            })\r\n            jwtModule.jwtVerify(list.token).then((result) => {\r\n\r\n                if (result.verify === \"verify\") {\r\n                    cb(true);\r\n                } else if (result.verify === \"unverify\") {\r\n                    cb(false, 401, 'Unauthorized')\r\n                } else {\r\n                    cb(false, 401, 'Unauthorized')\r\n                }\r\n\r\n            }).catch((err) => {\r\n\r\n                console.log(err)\r\n\r\n            })\r\n\r\n        }\r\n\r\n    }\r\n})\r\n\r\nwss.on('connection', ws => {\r\n\r\n    clients.push(ws);\r\n\r\n    ws.on('message', data => {\r\n\r\n        var jsonData = JSON.parse(data)\r\n        switch (jsonData.messageName) {\r\n\r\n\r\n            case \"userAccount\":\r\n                userDataMoudule.getUserID(jsonData.data).then((result) => {\r\n                    if (result.success === \"success\") {\r\n                        ws.account = jsonData.data\r\n                        ws.id = result.result.UserID\r\n                    } else if (result.success === \"fail\") {\r\n\r\n                    }\r\n\r\n                }).catch((err) => {\r\n                    res.send(err)\r\n                })\r\n\r\n                \r\n                break\r\n            \r\n            case \"message\":\r\n                jsonData.data.fromUserID = ws.id\r\n                jsonData.data.fromUserAccount = ws.account\r\n                chatMessageCtrl.saveMessage(jsonData.data).then((result) => {\r\n\r\n                    if (result.success === \"success\") {\r\n                        chatMessageCtrl.getMember(jsonData.data.roomName).then((result) => {\r\n\r\n                            \r\n                            for (var x = 0; x < clients.length; x++) {\r\n\r\n                                if (result.result.some(item => item.UserID === clients[x].id)) {\r\n                                    \r\n                                    clients[x].send(JSON.stringify(jsonData))\r\n                                }\r\n                            }\r\n\r\n                        }).catch((err) => {\r\n                            console.log(err)\r\n                        })\r\n\r\n                    }\r\n                }).catch((err)=>{\r\n                    console.log(err)\r\n                })\r\n                break\r\n\r\n            default:\r\n                break\r\n\r\n        }\r\n\r\n    })\r\n\r\n    ws.on('close', () => {\r\n\r\n        console.log('Close connected')\r\n\r\n        const index = clients.indexOf(ws);\r\n        if (index > -1) {\r\n            clients.splice(index, 1);\r\n        }\r\n\r\n    })\r\n\r\n\r\n})\r\n\r\nserver.listen(config.port, () => {\r\n    console.log(`server started on port http://127.0.\r\n    0.1:${config.port} (${config.env})`)\r\n})\r\n// if (!module.parent) {\r\n\r\n// }\r\n\r\nexport default\r\n    { app, wss };"],"sourceRoot":""}