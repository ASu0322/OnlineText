{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"express\"","webpack:///external \"joi\"","webpack:///external \"mysql\"","webpack:///external \"redis\"","webpack:///external \"jsonwebtoken\"","webpack:///external \"body-parser\"","webpack:///external \"cors\"","webpack:///external \"morgan\"","webpack:///external \"path\"","webpack:///external \"cookie-parser\"","webpack:///external \"ws\"","webpack:///external \"dotenv\"","webpack:///external \"http\"","webpack:///./src/config/config.js","webpack:///./src/server/modules/login.module.js","webpack:///./src/server/modules/jwt.module.js","webpack:///./src/server/controllers/login.controller.js","webpack:///./src/server/routes/login.route.js","webpack:///./src/server/modules/register.module.js","webpack:///./src/server/controllers/register.controller.js","webpack:///./src/server/routes/register.route.js","webpack:///./src/server/controllers/mainPage.controller.js","webpack:///./src/server/routes/mainPage.route.js","webpack:///./src/server/routes/verification.route.js","webpack:///./src/server/modules/message.module.js","webpack:///./src/server/modules/chatRoom.module.js","webpack:///./src/server/controllers/chatMessage.controller.js","webpack:///./src/server/modules/invite.module.js","webpack:///./src/server/modules/userData.module.js","webpack:///./src/server/controllers/invite.controller.js","webpack:///./src/server/controllers/userData.controller.js","webpack:///./src/server/routes/file.route.js","webpack:///./src/server/routes/index.route.js","webpack:///./src/config/express.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","config","envVarSchema","Joi","keys","NODE_ENV","string","default","allow","PORT","number","MYSQL_PORT","MYSQL_HOST","MYSQL_USER","MYSQL_PASS","MYSQL_NAME","VERSION","unknown","required","error","envVars","validate","process","env","Error","message","version","port","mysqlPort","mysqlHost","mysqlUserName","mysqlPass","mysqlDatabase","MYSQL_DATABASE","connectionPool","mysql","createPool","connection","host","user","password","database","insertValues","Promise","resolve","reject","getConnection","connectionError","sqlCommand","user_account","query","err","result","console","length","UserPassword","user_password","release","token","jwt","verify","payload","res","sign","_id","toString","expiresIn","cookie","maxAge","httpOnly","secure","req","body","accountModule","then","checkAccount_result","jwtModule","jwtSetCookie_result","redirect","render","success","catch","send","router","express","Router","post","loginCtrl","createAccount_result","registerCtrl","cookies","jwtVerify_result","RoomID","mainPageCtrl","today","Date","dateTime","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","roomID","fromUserID","roomName","data","chatRoomModule","getRoomMember_result","getRoomID_result","messageModule","saveMessage_result","client","redis","createClient","on","log","LRANGE","jsonpackage","x","JSON","parse","getChatPreloadMessage_result","RPUSH","stringify","toUserID","userID","getUserRoom","UserID","getUserFriend","getUserName","getUserID","userDataModule","getUserID_result","inviteModule","getFriendInvite_result","toUserID_result","params","userName","fromUserID_result","deleteFriendInvite_result","postFriendInvite_result","deleteGroupInvite_result","getUserRoom_result","getName","getName_result","getFriend","getFriend_result","userDataCtrl","inviteCtrl","delete","chatMessageCtrl","getOldMessage_result","use","login","register","mainPage","verification","file","app","bodyParser","json","urlencoded","extended","cookieParser","cors","morgan","set","upload","index","static","path","join","status","clients","server","createServer","wss","SocketServer","Server","verifyClient","info","cb","headers","list","split","forEach","parts","shift","trim","decodeURI","ws","push","jsonData","messageName","userDataMoudule","account","id","fromUserAccount","getMember_result","some","item","indexOf","splice","listen"],"mappings":"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","file":"index.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 13);\n","module.exports = require(\"express\");","module.exports = require(\"joi\");","module.exports = require(\"mysql\");","module.exports = require(\"redis\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"body-parser\");","module.exports = require(\"cors\");","module.exports = require(\"morgan\");","module.exports = require(\"path\");","module.exports = require(\"cookie-parser\");","module.exports = require(\"ws\");","module.exports = require(\"dotenv\");","module.exports = require(\"http\");","/* config.js */\r\nimport Joi from 'joi'\r\n\r\n// require and configure dotenv, will load vars in .env in PROCESS.ENV\r\nrequire('dotenv').config()\r\n\r\n// 建立每個變數 joi 驗證規則\r\nconst envVarSchema = Joi.object().keys({\r\n    NODE_ENV: Joi.string().default('development').allow(['development', 'production']), // 字串且預設值為development 並只允許兩種參數\r\n    PORT: Joi.number().default(8080), // 數字且預設值為 8080\r\n    MYSQL_PORT: Joi.number().default(3306), //數字且預設值為3306\r\n    MYSQL_HOST: Joi.string().default('127.0.0.1'), //字串取預設值為127.0.0.1\r\n    MYSQL_USER: Joi.string(), // 字串\r\n    MYSQL_PASS: Joi.string(), // 字串\r\n    MYSQL_NAME: Joi.string(), // 字串\r\n    VERSION: Joi.string() // 字串\r\n}).unknown().required()\r\n\r\n// process.env 撈取 .env 內的變數做 joi 驗證\r\nconst { error, value: envVars } = Joi.validate( process.env, envVarSchema)\r\n\r\nif (error) {\r\n    throw new Error(`Config validation error: ${error.message}`)\r\n}\r\n\r\nconst config = {\r\n    version: envVars.VERSION, // 版本\r\n    env: envVars.NODE_ENV,  // 開發模式\r\n    port: envVars.PORT,// API 阜號\r\n    mysqlPort: envVars.MYSQL_PORT, // 連接阜號(MYSQL_PORT)\r\n    mysqlHost: envVars.MYSQL_HOST, // 主機名稱 (MYSQL_HOST)\r\n    mysqlUserName: envVars.MYSQL_USER, // 用戶名稱 (MYSQL_USER)\r\n    mysqlPass: envVars.MYSQL_PASS, // 資料庫密碼(MYSQL_PASS)\r\n    mysqlDatabase: envVars.MYSQL_DATABASE  // 阜號\r\n}\r\n\r\nexport default config  // 匯出共用","import mysql from 'mysql'\r\nimport config from '../../config/config'\r\n\r\nconst connectionPool = mysql.createPool({\r\n    connection: 10,\r\n    host: config.mysqlHost,\r\n    user: config.mysqlUserName,\r\n    password: config.mysqlPass,\r\n    database: config.mysqlDatabase\r\n})\r\n\r\nconst checkAccount = (insertValues) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        connectionPool.getConnection((connectionError, connection) => {\r\n\r\n            if (connectionError) {\r\n\r\n                reject(connectionError)\r\n\r\n            } else {\r\n\r\n                var sqlCommand = \"Select UserPassword From account Where UserAccount = '\" + insertValues.user_account + \"'\"\r\n\r\n                connection.query(sqlCommand, function(err, result){\r\n\r\n                    if (err) {\r\n\r\n                        console.error('SQL error:', err)\r\n                        reject(err)\r\n                        \r\n                    } else if (result.length == 0) {\r\n\r\n                        reject(\"Account no found\")\r\n\r\n                    } else if (result[0].UserPassword === insertValues.user_password) {\r\n\r\n                        resolve(result);\r\n\r\n                    } else {\r\n\r\n                        console.error('SQL error:', err)\r\n                        reject(err)\r\n                        \r\n                    }\r\n\r\n                })\r\n                connection.release()\r\n            }\r\n        })\r\n\r\n    })\r\n}\r\n\r\nexport default {\r\n    checkAccount\r\n}","import jwt from 'jsonwebtoken'\n\nconst SECRET = 'thisismynewproject'\nconst expires = 1000 * 1000\n\nconst jwtVerify = (token)=>{\n    \n    return new Promise((resolve, reject)=>{\n\n        jwt.verify(token, SECRET, (err, payload) =>{\n            \n            if(err){\n                console.error('verify error:', err)\n                reject(err)\n\n            }else{\n\n                resolve(payload);\n\n            }\n        })\n    })\n    \n}\n\nconst jwtSetCookie = (user_account, res)=>{\n\n    return new Promise((resolve, reject)=>{\n\n        const token = jwt.sign({ _id: user_account.toString() }, SECRET, { expiresIn: '1 day' })\n        res.cookie('token', token, { maxAge: expires, httpOnly: true, secure: false })\n        resolve(\"CookieSet\");\n\n    })\n\n}\n\nexport default{\n    jwtVerify,\n    jwtSetCookie\n}","import accountModule from '../modules/login.module'\r\nimport jwtModule from '../modules/jwt.module'\r\n\r\nconst loginPost = (req, res) => {\r\n\r\n    const insertValues = req.body\r\n\r\n    accountModule.checkAccount(insertValues).then((checkAccount_result) => {\r\n\r\n        jwtModule.jwtSetCookie(insertValues.user_account, res).then((jwtSetCookie_result) => {\r\n\r\n            if (jwtSetCookie_result === \"CookieSet\") {\r\n\r\n                res.redirect('mainPage');\r\n\r\n            } else {\r\n\r\n                res.render(\"Login\", {\r\n                    success: false\r\n                })\r\n\r\n            }\r\n\r\n        }).catch((err) => {\r\n\r\n            res.send(err)\r\n\r\n        })\r\n\r\n    }).catch((err) => {\r\n\r\n        res.send(err)\r\n\r\n    })\r\n\r\n}\r\nexport default {\r\n    loginPost\r\n}","import express from 'express'\r\nimport loginCtrl from '../controllers/login.controller'\r\nconst router = express.Router()\r\n\r\nrouter.post('/',(req, res)=>{\r\n    loginCtrl.loginPost(req, res)\r\n})\r\n\r\nrouter.get('/', (req, res) => {\r\n    res.render('Login')\r\n})\r\n\r\n\r\nexport default router","import mysql from 'mysql'\r\nimport config from '../../config/config'\r\n\r\nconst connectionPool = mysql.createPool({\r\n    connection: 10,\r\n    host: config.mysqlHost,\r\n    user: config.mysqlUserName,\r\n    password: config.mysqlPass,\r\n    database: config.mysqlDatabase\r\n})\r\n\r\nconst createAccount = (insertValues) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        connectionPool.getConnection((connectionError, connection) => {\r\n\r\n            if (connectionError) {\r\n\r\n                reject(connectionError)\r\n\r\n            } else {\r\n\r\n                var sqlCommand = \"INSERT INTO Account(UserAccount, UserPassword) VALUES('\" +\r\n                    insertValues.user_account + \"','\" +\r\n                    insertValues.user_password + \"')\"\r\n               \r\n                connection.query(sqlCommand, function(err, result){\r\n\r\n                    if (err) {\r\n\r\n                        console.error('SQL error:', err)\r\n                        reject(err)\r\n\r\n                    } else {\r\n\r\n                        resolve(result);\r\n\r\n                    }\r\n                    \r\n                })\r\n\r\n                connection.release()\r\n\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\nexport default {\r\n    createAccount\r\n}","import accountModule from '../modules/register.module'\r\n\r\nconst registerPost = (req, res) => {\r\n    const insertValues = req.body\r\n\r\n    accountModule.createAccount(insertValues).then((createAccount_result) => {\r\n\r\n        res.redirect('verification')\r\n\r\n    }).catch((err) => {\r\n\r\n        res.send(err)\r\n\r\n    })\r\n\r\n}\r\n\r\nexport default {\r\n    registerPost\r\n}","import express from 'express'\r\nimport registerCtrl from '../controllers/register.controller'\r\n\r\nconst router = express.Router()\r\n\r\n\r\n// router.route('/').post(registerCtrl.registerPost)\r\n\r\nrouter.post('/', (req, res) => {\r\n    registerCtrl.registerPost(req, res)\r\n})\r\n\r\nrouter.get('/', (req, res) => {\r\n    res.render('Register')\r\n})\r\n\r\nexport default router","import jwtModule from '../modules/jwt.module'\r\n\r\nconst mainPageGet = (req, res) => {\r\n\r\n    const token = req.cookies.token;\r\n    jwtModule.jwtVerify(token).then((jwtVerify_result) => {\r\n\r\n        res.render('RoomInput')\r\n\r\n    }).catch((err) => {\r\n\r\n        res.send(err)\r\n\r\n    })\r\n}\r\n\r\nconst mainPagePost = (req, res) => {\r\n\r\n    const token = req.cookies.token;\r\n\r\n    jwtModule.jwtVerify(token).then((jwtVerify_result) => {\r\n\r\n        const RoomID = req.body.RoomID\r\n        res.render('GroupChat', {\r\n            RoomID: RoomID\r\n        })\r\n\r\n    }).catch((error) => {\r\n\r\n        res.send(error)\r\n\r\n    })\r\n}\r\n\r\nexport default {\r\n    mainPageGet,\r\n    mainPagePost\r\n}","import express from 'express'\r\nimport mainPageCtrl from '../controllers/mainPage.controller'\r\n\r\nconst router = express.Router()\r\n\r\n// router.route('/').post(mainPageCtrl.mainPagePost)\r\n\r\nrouter.post('/', (req, res) => {\r\n\r\n    mainPageCtrl.mainPagePost(req ,res)\r\n\r\n})\r\n\r\nrouter.get('/', (req, res) => {\r\n\r\n    mainPageCtrl.mainPageGet(req, res)\r\n\r\n})\r\n\r\n\r\n\r\nexport default router","import express from 'express'\r\n\r\nconst router = express.Router()\r\n\r\nrouter.get('/', (req, res) => {\r\n    res.render('Verification')\r\n})\r\nexport default router","import mysql from 'mysql'\r\nimport config from '../../config/config'\r\n\r\nconst connectionPool = mysql.createPool({\r\n    connection: 10,\r\n    host: config.mysqlHost,\r\n    user: config.mysqlUserName,\r\n    password: config.mysqlPass,\r\n    database: config.mysqlDatabase\r\n})\r\n\r\nconst saveMessage = (insertValues) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        connectionPool.getConnection((connectionError, connection) => {\r\n\r\n            if (connectionError) {\r\n\r\n                reject(connectionError)\r\n\r\n            } else {\r\n                var today = new Date();\r\n                var date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\r\n                var time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\r\n                var dateTime = date + ' ' + time;\r\n\r\n                var sqlCommand = \"INSERT INTO Message(RoomID, FromUserID, Time, Message) VALUES('\" +\r\n                    insertValues.roomID + \"','\" +\r\n                    insertValues.fromUserID + \"','\" +\r\n                    dateTime + \"','\" +\r\n                    insertValues.message + \"')\"\r\n\r\n\r\n                connection.query(sqlCommand, function (err, result) {\r\n\r\n\r\n                    if (err) {\r\n\r\n                        console.error('SQL error:', err)\r\n                        reject(err)\r\n\r\n                    } else {\r\n\r\n                        resolve(result);\r\n                    }\r\n                })\r\n                resolve(0);\r\n                connection.release()\r\n\r\n            }\r\n        })\r\n\r\n    })\r\n}\r\n\r\nconst getChatPreloadMessage = (insertValues) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        connectionPool.getConnection((connectionError, connection) => {\r\n            if (connectionError) {\r\n                reject(connectionError)\r\n            } else {\r\n                var sqlCommand = \"SELECT account.UserAccount, Message.Message \" +\r\n                    \"FROM chatroom \" +\r\n                    \"INNER JOIN message \" +\r\n                    \"ON chatroom.RoomID = message.RoomID \" +\r\n\r\n                    \"INNER JOIN account \" +\r\n                    \"ON account.UserID = message.FromUserID \" +\r\n\r\n                    \"WHERE chatroom.RoomName = \" +\r\n                    insertValues +\r\n\r\n                    \" ORDER BY message.MessageID \" +\r\n                    \"limit 50\";\r\n\r\n                connection.query(sqlCommand, function (err, result) {\r\n\r\n                    if (err) {\r\n\r\n                        console.error('SQL error:', err)\r\n                        reject(err)\r\n\r\n                    } else {\r\n\r\n                        resolve(result);\r\n\r\n                    }\r\n                })\r\n                connection.release()\r\n            }\r\n        })\r\n\r\n    })\r\n\r\n    // return new Promise((resolve, reject) => {\r\n\r\n    //     connectionPool.getConnection((connectionError, connection) => {\r\n    //         if (connectionError) {\r\n    //             reject(connectionError)\r\n    //         } else {\r\n    //             var sqlCommand = \"SELECT TOP\" +\r\n    //                 insertValues.limit +\r\n    //                 \" * From Message Where RoomID = \" +\r\n    //                 insertValues.roomID +\r\n    //                 \"DESC\"\r\n\r\n    //             connection.query(sqlCommand, function (err, result){\r\n\r\n    //                 if (err) {\r\n    //                     console.error('SQL error:', err)\r\n    //                     resultPackage[\"success\"] = \"fail\"\r\n    //                     resolve(resultPackage);\r\n    //                     // reject(error)\r\n    //                 } else {\r\n    //                     resultPackage[\"success\"] = \"success\"\r\n    //                     resultPackage[\"result\"] = result\r\n    //                     resolve(resultPackage);\r\n    //                 }\r\n    //             })\r\n    //             connection.release()\r\n    //         }\r\n    //     })\r\n\r\n    // })\r\n}\r\n\r\nexport default {\r\n    saveMessage,\r\n    getChatPreloadMessage\r\n}","import mysql from 'mysql'\nimport config from '../../config/config'\n\nconst connectionPool = mysql.createPool({\n    connection: 10,\n    host: config.mysqlHost,\n    user: config.mysqlUserName,\n    password: config.mysqlPass,\n    database: config.mysqlDatabase\n})\n\nconst creatChatRoom = (insertValues) => {\n\n    return new Promise((resolve, reject) => {\n\n        connectionPool.getConnection((connectionError, connection) => {\n\n            if (connectionError) {\n\n                reject(connectionError)\n\n            } else {\n\n                var sqlCommand = \"INSERT INTO ChatRoom(RoomName, Time, MemberNum, OwnID) VALUES('\" +\n                    insertValues.roomName + \"','\" +\n                    \"98-09-04\" + \"','\" +\n                    insertValues.memberNum + \"','\" +\n                    insertValues.ownID + \"')\"\n\n                connection.query(sqlCommand, function (err, result) {\n\n                    if (err) {\n\n                        console.error('SQL error:', err)\n                        reject(err)\n\n                    } else {\n\n                        resolve(result);\n                    }\n                    \n                })\n\n                connection.release()\n\n            }\n        })\n\n    })\n}\n\nconst getRoomID = (insertValues) => {\n\n    return new Promise((resolve, reject) => {\n\n        connectionPool.getConnection((connectionError, connection) => {\n\n            if (connectionError) {\n\n                reject(connectionError)\n\n            } else {\n                var sqlCommand = \"SELECT RoomID FROM ChatRoom WHERE RoomName = '\" +\n                    insertValues.roomName +\n                    \"'\"\n\n                connection.query(sqlCommand, function (err, result) {\n\n                    if (err) {\n                        console.error('SQL error:', err)\n                        reject(err)\n                    } else {\n\n                        resolve(result[0]);\n                    }\n                })\n\n                connection.release()\n\n            }\n        })\n\n    })\n}\n\nconst getRoomMember = (insertValues) => {\n\n    return new Promise((resolve, reject) => {\n\n        connectionPool.getConnection((connectionError, connection) => {\n\n            if (connectionError) {\n\n                reject(connectionError)\n\n            } else {\n                var sqlCommand = \"SELECT member.UserID \" +\n                    \"FROM chatroom \" +\n\n                    \"INNER JOIN member \" +\n                    \"ON chatroom.RoomID = member.RoomID \" +\n\n                    \"WHERE chatroom.RoomName = '\" +\n                    insertValues +\n                    \"'\"\n\n                connection.query(sqlCommand, function (err, result) {\n                    var resultPackage ={}\n                    if (err) {\n\n                        console.error('SQL error:', err)\n                        reject(err)\n\n                    } else {\n                        \n                        resolve(result);\n                        \n                    }\n                })\n\n                connection.release()\n\n            }\n        })\n\n    })\n}\nexport default {\n    creatChatRoom,\n    getRoomID,\n    getRoomMember\n}\n","import messageModule from '../modules/message.module'\r\nimport chatRoomModule from '../modules/chatRoom.module'\r\nimport redis from 'redis'\r\n\r\nconst getMember = (data) => {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        chatRoomModule.getRoomMember(data).then((getRoomMember_result) => {\r\n\r\n            resolve(getRoomMember_result)\r\n\r\n        }).catch((err) => {\r\n\r\n            reject(err)\r\n\r\n        })\r\n    })\r\n\r\n}\r\n\r\nvar saveMessage = (data) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        chatRoomModule.getRoomID(data).then((getRoomID_result) => {\r\n\r\n            data.roomID = getRoomID_result.RoomID\r\n            messageModule.saveMessage(data).then((saveMessage_result) => {\r\n\r\n                resolve(saveMessage_result)\r\n\r\n\r\n            }).catch((err) => {\r\n\r\n                reject(err)\r\n\r\n            })\r\n\r\n        }).catch((err) => {\r\n\r\n            reject(err)\r\n\r\n        })\r\n    })\r\n}\r\n\r\nconst getOldMessage = (data) => {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        const client = redis.createClient();\r\n        client.on('connect', () => {\r\n\r\n            console.log('Redis client connected');\r\n\r\n        });\r\n\r\n        client.LRANGE(data + \"_message\", 0, 50, (err, result) => {\r\n\r\n            if (result.length != 0) {\r\n                var jsonpackage = {}\r\n                jsonpackage[\"messageName\"] = \"getOldMessage\"\r\n                for (let x = 0; x < result.length; x++){\r\n                    result[x] = JSON.parse(result[x])\r\n                }\r\n                jsonpackage[\"data\"] = result\r\n                resolve(jsonpackage)\r\n\r\n            } else {\r\n                messageModule.getChatPreloadMessage(data).then((getChatPreloadMessage_result) => {\r\n\r\n                    var jsonpackage = {}\r\n                    jsonpackage[\"messageName\"] = \"getOldMessage\"\r\n                    jsonpackage[\"data\"] = getChatPreloadMessage_result\r\n\r\n                    for (var x = 0; x < jsonpackage.data.length; x++) {\r\n                        client.RPUSH(data + \"_message\", JSON.stringify(jsonpackage.data[x]));\r\n                    }\r\n                    resolve(jsonpackage)\r\n\r\n                }).catch((err) => {\r\n\r\n                    reject(err)\r\n                })\r\n\r\n            }\r\n            if (err) {\r\n                console.log(err);\r\n                throw err;\r\n            }\r\n\r\n        });\r\n\r\n    })\r\n\r\n}\r\n\r\nexport default {\r\n    getMember,\r\n    saveMessage,\r\n    getOldMessage\r\n}","import mysql from 'mysql'\nimport config from '../../config/config'\n\nconst connectionPool = mysql.createPool({\n    connection: 10,\n    host: config.mysqlHost,\n    user: config.mysqlUserName,\n    password: config.mysqlPass,\n    database: config.mysqlDatabase\n})\n\nconst getFriendInvite = (toUserID) => {\n\n    return new Promise((resolve, reject) => {\n\n        connectionPool.getConnection((connectionError, connection) => {\n\n            if (connectionError) {\n\n                reject(connectionError)\n\n            } else {\n\n                var sqlCommand = \"SELECT Account.UserAccount \" +\n                    \"FROM Account \" +\n\n                    \"INNER JOIN friendInvite \" +\n                    \"ON friendInvite.fromUserID = Account.userID \" +\n\n                    \"WHERE friendInvite.toUserID =\" +\n                    toUserID \n\n                connection.query(sqlCommand, function (err, result) {\n\n                    if (err) {\n\n                        console.error('SQL error:', err)\n                        reject(err)\n\n                    } else {\n\n                        resolve(result);\n                    }\n\n                })\n\n                connection.release()\n\n            }\n        })\n\n    })\n\n}\n\nconst deleteFriendInvite = (toUserID, fromUserID)=>{\n    \n    return new Promise((resolve, reject) => {\n\n        connectionPool.getConnection((connectionError, connection) => {\n\n            if (connectionError) {\n\n                reject(connectionError)\n\n            } else {\n\n                var sqlCommand = \"DELETE FROM friendInvite \" + \n                \"WHERE toUserID = \" + toUserID + \" AND \";\n                \"WHERE fromUserID = \" + fromUserID \n\n                connection.query(sqlCommand, function (err, result) {\n\n                    if (err) {\n\n                        console.error('SQL error:', err)\n                        reject(err)\n\n                    } else {\n\n                        resolve(result);\n                    }\n                    \n                })\n\n                connection.release()\n\n            }\n        })\n\n    })\n    \n}\n\nconst postFriendInvite = (toUserID, fromUserID)=>{\n    \n    return new Promise((resolve, reject) => {\n\n        connectionPool.getConnection((connectionError, connection) => {\n\n            if (connectionError) {\n\n                reject(connectionError)\n\n            } else {\n\n                var sqlCommand = \"INSERT INTO friendInvite(toUserID, fromUserID) VALUES('\" +\n                    toUserID + \"','\" +\n                    fromUserID + \"')\"\n\n\n                connection.query(sqlCommand, function (err, result) {\n\n                    if (err) {\n\n                        console.error('SQL error:', err)\n                        reject(err)\n\n                    } else {\n\n                        resolve(result);\n                    }\n                    \n                })\n\n                connection.release()\n\n            }\n        })\n\n    })\n    \n}\n\nconst getGroupInvite = (userID) => {\n\n    return new Promise((resolve, reject) => {\n\n        connectionPool.getConnection((connectionError, connection) => {\n\n            if (connectionError) {\n\n                reject(connectionError)\n\n            } else {\n\n                var sqlCommand = \"SELECT ChatRoom.RoomName \" +\n                    \"FROM ChatRoom \" +\n\n                    \"INNER JOIN groupInvite \" +\n                    \"ON groupInvite.groupID = ChatRoom.RoomID \" +\n\n                    \"WHERE groupInvite.userID =\" +\n                    userID \n\n                connection.query(sqlCommand, function (err, result) {\n\n                    if (err) {\n\n                        console.error('SQL error:', err)\n                        reject(err)\n\n                    } else {\n\n                        resolve(result);\n                    }\n\n                })\n\n                connection.release()\n\n            }\n        })\n\n    })\n\n}\n\nconst deleteGroupInvite = (userID, groupID)=>{\n    \n    return new Promise((resolve, reject) => {\n\n        connectionPool.getConnection((connectionError, connection) => {\n\n            if (connectionError) {\n\n                reject(connectionError)\n\n            } else {\n\n                var sqlCommand = \"DELETE FROM groupInvite \" + \n                \"WHERE userID = \" + userID + \" AND \";\n                \"WHERE groupID = \" + groupID \n\n                connection.query(sqlCommand, function (err, result) {\n\n                    if (err) {\n\n                        console.error('SQL error:', err)\n                        reject(err)\n\n                    } else {\n\n                        resolve(result);\n                    }\n                    \n                })\n\n                connection.release()\n\n            }\n        })\n\n    })\n    \n}\n\nconst postGroupInvite = (userID, groupID)=>{\n    \n    return new Promise((resolve, reject) => {\n\n        connectionPool.getConnection((connectionError, connection) => {\n\n            if (connectionError) {\n\n                reject(connectionError)\n\n            } else {\n\n                var sqlCommand = \"INSERT INTO groupInvite(userID, groupID) VALUES('\" +\n                    userID + \"','\" +\n                    groupID + \"')\"\n\n\n                connection.query(sqlCommand, function (err, result) {\n\n                    if (err) {\n\n                        console.error('SQL error:', err)\n                        reject(err)\n\n                    } else {\n\n                        resolve(result);\n                    }\n                    \n                })\n\n                connection.release()\n\n            }\n        })\n\n    })\n    \n}\n\nexport default{\n    getFriendInvite,\n    deleteFriendInvite,\n    postFriendInvite,\n    getGroupInvite,\n    deleteGroupInvite,\n    postGroupInvite\n}","import mysql from 'mysql'\nimport config from '../../config/config'\n\nconst connectionPool = mysql.createPool({\n    connection: 10,\n    host: config.mysqlHost,\n    user: config.mysqlUserName,\n    password: config.mysqlPass,\n    database: config.mysqlDatabase\n})\n\nconst getUserRoom = (insertValues) => {\n\n    return new Promise((resolve, reject) => {\n\n        connectionPool.getConnection((connectionError, connection) => {\n\n            if (connectionError) {\n                reject(connectionError)\n\n            } else {\n\n                var sqlCommand = \"SELECT chatroom.RoomID, chatroom.Time, member.UserID, chatroom.RoomName \" +\n                    \"FROM member \" +\n                    \"INNER JOIN chatroom \" +\n                    \"ON chatroom.RoomID = member.RoomID \" +\n                    \"WHERE member.UserID = \" +\n                    insertValues.UserID\n\n                connection.query(sqlCommand, function (err, result) {\n                    if (err) {\n                        console.error('SQL error:', err)\n                        reject(err)\n                    } else {\n\n                        resolve(result);\n\n                    }\n                })\n\n                connection.release()\n\n            }\n        })\n\n    })\n}\n\nconst getUserFriend = (insertValues) => {\n\n    return new Promise((resolve, reject) => {\n\n        connectionPool.getConnection((connectionError, connection) => {\n\n            if (connectionError) {\n\n                reject(connectionError)\n\n            } else {\n\n                var sqlCommand = \"SELECT Friend.UserID1 \" +\n                    \"FROM Account \" +\n                    \"INNER JOIN Friend \" +\n                    \"ON Friend.UserID2 = Account.UserID \" +\n                    \"WHERE member.UserID2 = \" +\n                    insertValues.UserID +\n\n                    \" UNION SELECT Friend.UserID2 \" +\n                    \"FROM Account \" +\n                    \"INNER JOIN Friend \" +\n                    \"ON Friend.UserID1 = Account.UserID \" +\n                    \"WHERE member.UserID1 = \" +\n                    insertValues.UserID +\n\n                    connection.query(sqlCommand, function (err, result) {\n\n                        if (err) {\n\n                            console.error('SQL error:', err)\n                            reject(err)\n\n                        } else {\n\n                            resolve(result);\n                        }\n                    })\n\n                connection.release()\n\n            }\n        })\n\n    })\n}\n\n\nconst getUserID = (insertValues) => {\n\n    return new Promise((resolve, reject) => {\n\n        connectionPool.getConnection((connectionError, connection) => {\n\n            if (connectionError) {\n\n                reject(connectionError)\n\n            } else {\n\n                var sqlCommand = \"SELECT UserID FROM Account WHERE UserAccount = '\" + insertValues + \"'\"\n                connection.query(sqlCommand, function (err, result) {\n                    var resultPackage = {}\n                    if (err) {\n\n                        console.error('SQL error:', err)\n                        reject(err)\n\n                    } else {\n\n                        resolve(result[0]);\n\n                    }\n                })\n\n                connection.release()\n\n            }\n        })\n\n    })\n}\n\nconst getUserName = (insertValues) => {\n\n    return new Promise((resolve, reject) => {\n\n        connectionPool.getConnection((connectionError, connection) => {\n\n            if (connectionError) {\n\n                reject(connectionError)\n\n            } else {\n\n                var sqlCommand = \"SELECT UserID FROM Account WHERE UserAccount = '\" + insertValues._id + \"'\"\n                connection.query(sqlCommand, function (err, result) {\n                    if (err) {\n\n                        console.error('SQL error:', err)\n                        reject(err)\n\n                    } else {\n\n                        resolve(result[0]);\n\n                    }\n                })\n\n                connection.release()\n\n            }\n        })\n\n    })\n}\n\nexport default {\n    getUserRoom,\n    getUserFriend,\n    getUserName,\n    getUserID\n}\n","import jwtModule from '../modules/jwt.module'\nimport inviteModule from '../modules/invite.module'\nimport userDataModule from '../modules/userData.module'\nimport chatRoomModule from '../modules/chatRoom.module'\n\n\nconst getFriendInvite = (req, res) => {\n\n    const token = req.cookies.token;\n\n    jwtModule.jwtVerify(token).then((jwtVerify_result) => {\n\n        userDataModule.getUserID(jwtVerify_result._id).then((getUserID_result) => {\n\n            inviteModule.getFriendInvite(getUserID_result.UserID).then((getFriendInvite_result) => {\n\n                var jsonpackage = {}\n                jsonpackage[\"messageName\"] = \"friendInvite\"\n                jsonpackage[\"data\"] = getFriendInvite_result\n                res.send(JSON.stringify(jsonpackage))\n\n            }).catch((err) => {\n\n                res.send(err)\n\n            })\n\n        }).catch((err) => {\n\n            res.send(err)\n\n        })\n\n    }).catch((err) => {\n\n        res.send(err)\n\n    })\n\n}\n\nconst deleteFriendInvite = (req, res) => {\n\n    const token = req.cookies.token;\n\n    jwtModule.jwtVerify(token).then((jwtVerify_result) => {\n\n        userDataModule.getUserID(jwtVerify_result._id).then((toUserID_result) => {\n\n            userDataModule.getUserID(req.params.userName).then((fromUserID_result) => {\n\n                inviteModule.deleteFriendInvite(toUserID_result.UserID, fromUserID_result.UserID).then((deleteFriendInvite_result) => {\n\n                }).catch((err) => {\n\n                    res.send(err)\n\n                })\n\n            }).catch((err) => {\n\n                res.send(err)\n\n            })\n\n        }).catch((err) => {\n\n            res.send(err)\n\n        })\n        \n\n    }).catch((err) => {\n\n        res.send(err)\n\n    })\n\n}\n\nconst postFriendInvite = (req, res) => {\n\n    const token = req.cookies.token;\n\n    jwtModule.jwtVerify(token).then((jwtVerify_result) => {\n\n        userDataModule.getUserID(jwtVerify_result._id).then((fromUserID_result) => {\n\n            userDataModule.getUserID(req.params.userName).then((toUserID_result) => {\n\n                inviteModule.postFriendInvite(toUserID_result.UserID, fromUserID_result.UserID).then((postFriendInvite_result) => {\n\n                }).catch((err) => {\n\n                    res.send(err)\n\n                })\n\n            }).catch((err) => {\n\n                res.send(err)\n\n            })\n\n        }).catch((err) => {\n\n            res.send(err)\n\n        })\n\n        \n\n    }).catch((err) => {\n\n        res.send(err)\n\n    })\n\n}\n\nconst getGroupInvite = (req, res) => {\n\n    const token = req.cookies.token;\n\n    jwtModule.jwtVerify(token).then((jwtVerify_result) => {\n\n        userDataModule.getUserID(jwtVerify_result._id).then((getUserID_result) => {\n\n            inviteModule.getGroupInvite(getUserID_result.UserID).then((deleteGroupInvite_result) => {\n\n                var jsonpackage = {}\n                jsonpackage[\"messageName\"] = \"groupInvite\"\n                jsonpackage[\"data\"] = deleteGroupInvite_result\n                res.send(JSON.stringify(jsonpackage))\n\n            }).catch((err) => {\n\n                res.send(err)\n\n            })\n\n        }).catch((err) => {\n\n            res.send(err)\n\n        })\n\n    }).catch((err) => {\n\n        res.send(err)\n\n    })\n\n}\n\nconst deleteGroupInvite = (req, res) => {\n\n    const token = req.cookies.token;\n\n    jwtModule.jwtVerify(token).then((jwtVerify_result) => {\n\n        userDataModule.getUserID(jwtVerify_result._id).then((getUserID_result) => {\n\n            chatRoomModule.getRoomID(req.params).then((getRoomID_result) => {\n\n                inviteModule.deleteGroupInvite(getUserID_result.UserID, getRoomID_result).then((deleteGroupInvite_result) => {\n\n                }).catch((err) => {\n\n                    res.send(err)\n\n                })\n\n            }).catch((err) => {\n\n                res.send(err)\n\n            })\n\n        }).catch((err) => {\n\n            res.send(err)\n\n        })\n\n    }).catch((err) => {\n\n        res.send(err)\n\n    })\n\n}\n\nconst postGroupInvite = (req, res) => {\n\n    const token = req.cookies.token;\n\n    jwtModule.jwtVerify(token).then((jwtVerify_result) => {\n\n        userDataModule.getUserID(jwtVerify_result._id).then((getUserID_result) => {\n\n            chatRoomModule.getRoomID(req.params).then((getRoomID_result) => {\n\n                inviteModule.postGroupInvite(getUserID_result.UserID, getRoomID_result).then((postGroupInvite_result) => {\n\n                }).catch((err) => {\n\n                    res.send(err)\n\n                })\n\n            }).catch((err) => {\n\n                res.send(err)\n\n            })\n\n        }).catch((err) => {\n\n            res.send(err)\n\n        })\n        \n\n    }).catch((err) => {\n\n        res.send(err)\n\n    })\n\n}\n\nexport default {\n    getFriendInvite,\n    deleteFriendInvite,\n    postFriendInvite,\n    getGroupInvite,\n    deleteGroupInvite,\n    postGroupInvite\n}","import userDataModule from '../modules/userData.module'\nimport jwtModule from '../modules/jwt.module'\n\nconst getRoom = (req, res) => {\n    const token = req.cookies.token;\n    jwtModule.jwtVerify(token).then((jwtVerify_result) => {\n\n        userDataModule.getUserID(jwtVerify_result._id).then((getUserID_result) => {\n\n            userDataModule.getUserRoom(getUserID_result).then((getUserRoom_result) => {\n\n                    var jsonpackage = {}\n                    jsonpackage[\"messageName\"] = \"userRoom\"\n                    jsonpackage[\"data\"] = getUserRoom_result\n                    res.send(JSON.stringify(jsonpackage))\n\n            }).catch((err) => {\n\n                res.send(err)\n\n            })\n\n        }).catch((err) => {\n\n            res.send(err)\n\n        })\n\n    }).catch((err) => {\n\n        res.send(err)\n\n    })\n\n}\nconst getFriend = (req, res) => {\n    const token = req.cookies.token;\n    jwtModule.jwtVerify(token).then((jwtVerify_result) => {\n\n        userDataModule.getName(jwtVerify_result).then((getName_result) => {\n\n            userDataModule.getFriend(getName_result).then((getFriend_result) => {\n\n                    var jsonpackage = {}\n                    jsonpackage[\"messageName\"] = \"userFriend\"\n                    jsonpackage[\"data\"] = getFriend_result\n                    res.send(JSON.stringify(jsonpackage))\n\n            }).catch((err) => {\n\n                res.send(err)\n\n            })\n\n            res.send(JSON.stringify())\n\n        }).catch((err) => {\n\n            res.send(err)\n\n        })\n\n    }).catch((err) => {\n\n        res.send(err)\n\n    })\n\n}\n\nconst getID = (req, res) => {\n\n    const token = req.cookies.token;\n\n    jwtModule.jwtVerify(token).then((jwtVerify_result) => {\n\n\n        userDataModule.getUserName(jwtVerify_result).then((getUserName_result) => {\n\n            var jsonpackage = {}\n            jsonpackage[\"messageName\"] = \"userAccount\"\n            jsonpackage[\"data\"] = getUserName_result\n            res.send(JSON.stringify(jsonpackage))\n\n        }).catch((err) => {\n\n            res.send(err)\n\n        })\n\n    }).catch((err) => {\n\n        res.send(err)\n\n    })\n\n}\n\nconst getName = (req, res) => {\n\n    const token = req.cookies.token;\n\n    jwtModule.jwtVerify(token).then((jwtVerify_result) => {\n\n\n        var jsonpackage = {}\n        jsonpackage[\"messageName\"] = \"userAccount\"\n        jsonpackage[\"data\"] = jwtVerify_result._id\n        res.send(JSON.stringify(jsonpackage))\n\n    }).catch((err) => {\n\n        res.send(err)\n\n    })\n\n}\n\nexport default {\n    getRoom,\n    getFriend,\n    getName,\n    getID\n}","import express from 'express'\r\nimport chatMessageCtrl from '../controllers/chatMessage.controller'\r\nimport inviteCtrl from '../controllers/invite.controller'\r\nimport userDataCtrl from '../controllers/userData.controller'\r\n\r\nconst router = express.Router()\r\n\r\n// router.get('/chatMessage/:chatRoomName', function (req, res) {\r\n//     chatMessageCtrl.sendPassMessage(req, res)\r\n// })\r\n\r\n// router.get('/chatMessage/:chatRoomName/:limit', function (req, res) {\r\n//     chatMessageCtrl.sendPassMessage(req, res)\r\n// })\r\n\r\nrouter.get('/room', function (req, res) {\r\n\r\n    userDataCtrl.getRoom(req, res)\r\n})\r\n\r\nrouter.get('/userName', function (req, res) {\r\n    userDataCtrl.getName(req, res)\r\n})\r\n\r\n\r\n// router.put('/friend/:userName', function (req, res) {\r\n//     userDataCtrl.getName(req, res)\r\n// })\r\n\r\n\r\nrouter.get('/friend', function (req, res) {\r\n    userDataCtrl.getFriend(req, res)\r\n})\r\n\r\n\r\n\r\nrouter.get('/groupInvite', function (req, res) {\r\n    inviteCtrl.getGroupInvite(req, res)\r\n})\r\n\r\nrouter.post('/groupInvite/:userName/:roomName', function (req, res) {\r\n    inviteCtrl.postFriendInvite(req, res)\r\n})\r\n\r\nrouter.delete('/groupInvite/:roomName', function (req, res) {\r\n    inviteCtrl.deleteFriendInvite(req, res)\r\n})\r\n\r\n\r\n\r\n\r\nrouter.get('/friendInvite', function (req, res) {\r\n    inviteCtrl.getFriendInvite(req, res)\r\n})\r\n\r\nrouter.post('/friendInvite/:userName', function (req, res) {\r\n    inviteCtrl.postFriendInvite(req, res)\r\n})\r\n\r\nrouter.delete('/friendInvite/:userName', function (req, res) {\r\n    inviteCtrl.deleteFriendInvite(req, res)\r\n})\r\n\r\n\r\n\r\nrouter.get('/oldMessage/:roomName', function (req, res) {\r\n\r\n    chatMessageCtrl.getOldMessage(req.params.roomName).then((getOldMessage_result) => {\r\n        \r\n        res.send(JSON.stringify(getOldMessage_result))\r\n\r\n    }).catch((err) => {\r\n\r\n        console.log(err)\r\n\r\n    })\r\n\r\n\r\n})\r\nexport default router","import express from 'express'\r\nimport login from './login.route'\r\nimport register from './register.route'\r\nimport mainPage from './mainPage.route'\r\nimport verification from './verification.route'\r\nimport file from './file.route'\r\n\r\n\r\nconst router = express.Router()\r\n\r\n/* GET localhost:[port]/api page. */\r\n// router.get('/', (req, res) => {\r\n//     res.send(`此路徑是: losdfsfdfcalhost:${config.port}/api`)\r\n// })\r\n\r\nrouter.use('/login', login)\r\nrouter.use('/register', register)\r\nrouter.use('/mainPage', mainPage)\r\nrouter.use('/verification', verification)\r\nrouter.use('/file', file)\r\n\r\nexport default router ","/* express.js */\r\nimport express from 'express';\r\nimport config from './config';\r\nimport index from '../server/routes/index.route';\r\nimport bodyParser from 'body-parser';\r\nimport cors from 'cors'\r\nimport morgan from 'morgan'\r\nimport path from 'path'\r\nimport cookieParser from 'cookie-parser'\r\n\r\nconst app = express()\r\napp.use(bodyParser.json())\r\napp.use(bodyParser.urlencoded({ extended: true }))\r\napp.use(cookieParser())\r\napp.use(cors())\r\napp.use(morgan('dev'))\r\n\r\napp.set('views', './views')\r\napp.set(\"view engine\", \"jade\")\r\n\r\n/* GET home page. */\r\napp.upload = function (req, res) {\r\n    console.log(req.body)\r\n};\r\n\r\napp.get('/', (req, res) => {\r\n    res.send(`server started express on  port http://127.0.0.1:${config.port} (${config.env})`)\r\n})\r\napp.use('/OnlineText', index)\r\n\r\napp.use(express.static(path.join('C:/OnlineText/', 'public')));\r\n\r\napp.use(function (req, res) {\r\n    res.status(404).render('404page')\r\n})\r\n\r\nexport default app","import redis from 'redis'\r\nimport config from './config/config'\r\nimport app from './config/express'\r\nimport jwtModule from './server/modules/jwt.module'\r\nimport chatMessageCtrl from './server/controllers/chatMessage.controller'\r\nimport userDataMoudule from './server/modules/userData.module'\r\nimport SocketServer from 'ws'\r\n\r\n\r\nvar clients = []\r\nconst server = require('http').createServer(app);\r\nconst wss = new SocketServer.Server({\r\n    server: server\r\n    ,\r\n    verifyClient: function (info, cb) {\r\n        var token = info.req.headers.cookie\r\n        var list = {}\r\n\r\n        if (!token) {\r\n            cb(false, 401, 'Unauthorized')\r\n        }\r\n        else {\r\n            token.split(';').forEach(function (cookie) {\r\n                var parts = cookie.split('=');\r\n                list[parts.shift().trim()] = decodeURI(parts.join('='));\r\n            })\r\n            jwtModule.jwtVerify(list.token).then((jwtVerify_result) => {\r\n\r\n                cb(true);\r\n\r\n            }).catch((err) => {\r\n\r\n                console.log(err)\r\n                cb(false, 401, 'Unauthorized')\r\n\r\n            })\r\n\r\n        }\r\n\r\n    }\r\n})\r\n\r\nwss.on('connection', ws => {\r\n\r\n    clients.push(ws);\r\n\r\n    ws.on('message', data => {\r\n\r\n        var jsonData = JSON.parse(data)\r\n        switch (jsonData.messageName) {\r\n\r\n\r\n            case \"userAccount\":\r\n                userDataMoudule.getUserID(jsonData.data).then((getUserID_result) => {\r\n\r\n                    ws.account = jsonData.data\r\n                    ws.id = getUserID_result.UserID\r\n\r\n                }).catch((err) => {\r\n                    res.send(err)\r\n                })\r\n\r\n\r\n                break\r\n\r\n            case \"message\":\r\n                jsonData.data.fromUserID = ws.id\r\n                jsonData.data.fromUserAccount = ws.account\r\n                chatMessageCtrl.saveMessage(jsonData.data).then((saveMessage_result) => {\r\n\r\n                    chatMessageCtrl.getMember(jsonData.data.roomName).then((getMember_result) => {\r\n\r\n\r\n                        const client = redis.createClient(); // this creates a new client\r\n                        client.on('connect', () => {\r\n                            console.log('Redis client connected');\r\n                        });\r\n                        client.RPUSH(jsonData.data.roomName + \"_message\", JSON.stringify(jsonData.data));\r\n\r\n                        for (var x = 0; x < clients.length; x++) {\r\n\r\n                            if (getMember_result.some(item => item.UserID === clients[x].id)) {\r\n\r\n                                clients[x].send(JSON.stringify(jsonData))\r\n\r\n                            }\r\n                        }\r\n\r\n                    }).catch((err) => {\r\n                        console.log(err)\r\n                    })\r\n\r\n                }).catch((err) => {\r\n                    console.log(err)\r\n                })\r\n                break\r\n\r\n            default:\r\n                break\r\n\r\n        }\r\n\r\n    })\r\n\r\n    ws.on('close', () => {\r\n\r\n        console.log('Close connected')\r\n\r\n        const index = clients.indexOf(ws);\r\n        if (index > -1) {\r\n            clients.splice(index, 1);\r\n        }\r\n\r\n    })\r\n\r\n})\r\n\r\nserver.listen(config.port, () => {\r\n    console.log(`server started on port http://127.0.\r\n    0.1:${config.port} (${config.env})`)\r\n})\r\n// if (!module.parent) {\r\n\r\n// }\r\n\r\nexport default\r\n    { app, wss };"],"sourceRoot":""}